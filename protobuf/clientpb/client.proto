syntax = "proto3";
package clientpb;

import "commonpb/common.proto";
import "sliverpb/sliver.proto";
import "sliverpb/malleable.proto";



// [ Version ] ----------------------------------------
message Version {
  int32 Major = 1;
  int32 Minor = 2;
  int32 Patch = 3;

  string Commit = 4;
  bool Dirty = 5;
  int64 CompiledAt = 6;

  string OS = 7;
  string Arch = 8;
}

// [ History commands ] ----------------------------------------

// AddCmdHistoryRequest - Consoles send their commands each time.
// If the current command is executed in an implant context,
// the precise UUID is passed along, so that each implant host has
// one unified history, and all sessions created on the same host,
// will share the same set.
message AddCmdHistoryRequest {
  string Line = 1;
  Session Session = 2;      
  Beacon Beacon = 3;

  commonpb.Request Request = 9;
}

message AddCmdHistory {
  bool Doublon = 1;          
  repeated string User = 2;
  repeated string Sliver = 3;

  commonpb.Response Response = 9;
}

// HistoryRequest - A console wants a command history.
// We may ask for two sets of history at once: the user, and a session
message HistoryRequest {
  bool AllConsoles = 1;     
  int32 Index = 2;         
  Session Session = 3;      
  Beacon Beacon = 4;
        
  commonpb.Request Request = 9;
}

// History - Command history content.
message History {
  repeated string User = 2;
  int32 UserHistLength = 3;

  repeated string Sliver = 4;
  int32 SliverHistLength = 5;

  commonpb.Response Response = 9;
}

// [ Console configuration ] ----------------------------------------

// Ask for config
message GetConsoleConfigReq {
  string ClientID = 1;
  commonpb.Request Request = 9;
}

// Get config
message GetConsoleConfig {
  bytes Config = 1;
  string ClientID = 2; // Sent back to identify this precise client
  commonpb.Response Response = 9;
}

// Save the config
message SaveConsoleConfigReq {
  bytes Config = 1;
  commonpb.Request Request = 9;
}

// Saved
message SaveConsoleConfig {
  commonpb.Response Response = 9;
}

// [ Sliver Settings] ----------------------------------------

// Ask for settings 
message GetSliverSettingsReq {
  commonpb.Request Request = 9;
}

// Get settings 
message GetSliverSettings {
  bytes Settings = 1;
  commonpb.Response Response = 9;
}

// Save the settings 
message SaveSliverSettingsReq {
  bytes Settings = 1;
  commonpb.Request Request = 9;
}

// Saved
message SaveSliverSettings {
  commonpb.Response Response = 9;
}

// [ Core ] ----------------------------------------

message Session {
  // Base
  uint32 ID = 1;
  string UUID = 27;      // generated at runtime by the session
  string BeaconID = 200; // Associated runtime beacon, if any
  string Name = 2;
  string Hostname = 3;
  string HostUUID = 4;
  string Username = 5;
  string UID = 6;
  string GID = 7;
  string OS = 8;
  string Arch = 9;
  int32 PID = 12;
  string Filename = 13; // Argv[0]
  int64 LastCheckin = 14;
  string Version = 16;
  bool Evasion = 17;
  State State = 18;
  bool Burned = 22;
  string WorkingDirectory = 25;
  repeated string Extensions = 23;
  // string ConfigID = 24;

  // Transports
  sliverpb.Transport Transport = 50;
}

message Beacon {
  string ID = 1;
  string SessionID = 200;  // Associated runtime session, if any
  string Name = 2;
  string Hostname = 3;
  string UUID = 4;
  string Username = 5;
  string UID = 6;
  string GID = 7;
  string OS = 8;
  string Arch = 9;
  int32 PID = 12;
  string Filename = 13; // Argv[0]
  int64 LastCheckin = 14;
  string ActiveC2 = 15;
  string Version = 16;
  bool Evasion = 17;
  State State = 18;
  string WorkingDirectory = 19;
  int64 ReconnectInterval = 30;
  int64 PollTimeout = 31;

  int64 Interval = 21;
  int64 Jitter = 22;
  bool Burned = 23;
  int64 NextCheckin = 24;

  int64 TasksCount = 26;
  int64 TasksCountCompleted = 27;

  // Transports
  string TransportID = 25; // Query needs
  sliverpb.Transport Transport = 50;
}

message Beacons {
  repeated Beacon Beacons = 2;
}

message BeaconTask {
  string ID = 1;
  string BeaconID = 2;
  int64 CreatedAt = 3;
  string State = 4;
  int64 SentAt  = 5;
  int64 CompletedAt = 6;
  bytes Request = 7;
  bytes Response = 8;
  string Description = 9;
}

message BeaconTasks {
  string BeaconID = 1;
  repeated BeaconTask Tasks = 2;
}

// State - Current runtime &/or connectivity state of a session/beacon
enum State {
  Alive = 0;
  Dead = 1;
  Sleep = 2;
  Switching = 3;
  Disconnect = 4;
}

// [ Implants ] --------------------------------------------------------

enum OutputFormat {
  SHARED_LIB = 0;
  SHELLCODE = 1;
  EXECUTABLE = 2;
  SERVICE = 3;
}

// ImplantConfig - Configuration necessary to build an implant.
// Most of its is related to the build itself, but not about
// its various C2 stacks. Those are stored in its list of C2Channel types.
message ImplantConfig {
  string ID = 100;

  // Platform
  string GOOS = 1;
  string GOARCH = 2;

  // Build type
  OutputFormat Format = 25;
  bool IsSharedLib = 26;
  bool IsService = 28;
  bool IsShellcode = 29;

  // Standard
  string Name = 3;
  string FileName = 27;
  bool Debug = 7;
  bool Evasion = 31;
  bool ObfuscateSymbols = 30;
  repeated string CanaryDomains = 11;

  // Limits
  bool LimitDomainJoined = 20;
  string LimitDatetime = 21;
  string LimitHostname = 22;
  string LimitUsername = 23;
  string LimitFileExists = 32;

  // C2 stacks
  repeated sliverpb.Malleable C2s = 15;
  repeated string RuntimeC2s = 16;
  string ConnectionStrategy = 39;

  // SSH Comm system
  bool CommDisabled = 17;
  string CommServerCert = 40;
  string CommServerKey = 41;
  string CommServerFingerprint = 42;
}

// Configs of previously built implants
message ImplantBuilds {
  map<string, ImplantConfig> Configs = 1;
}

message CompilerTarget {
  string GOOS = 1;  // The server's OS
  string GOARCH = 2;  // The server's Arch
  OutputFormat Format = 3;
}

message CrossCompiler {
  string TargetGOOS = 1;  // The server's OS
  string TargetGOARCH = 2;  // The server's Arch
  string CCPath = 3;
  string CXXPath = 4;
}

message Compiler {
  string GOOS = 1;  // The server's OS
  string GOARCH = 2;  // The server's Arch
  repeated CompilerTarget Targets = 3;
  repeated CrossCompiler CrossCompilers = 4;
  repeated CompilerTarget UnsupportedTargets = 5;
}

message DeleteReq {
  string Name = 1;
}

// DNSCanary - Single canary and metadata
message DNSCanary {
  string ImplantName = 1;
  string Domain = 2;
  bool Triggered = 3;
  string FirstTriggered = 4;
  string LatestTrigger = 5;
  uint32 Count = 6;
}

message Canaries {
  repeated DNSCanary Canaries = 1;
}

// UniqueWGIP - Unique wireguard IP
message UniqueWGIP {
  string IP = 1;
}

message ImplantProfile {
  string Name = 1;
  ImplantConfig Config = 2;
}

message ImplantProfiles {
  repeated ImplantProfile Profiles = 1;
}

message RegenerateReq {
  string ImplantName = 1;
}

message Job {
  string ID = 1;
  string SessionID = 2;
  string SessionName = 3;
  string SessionUsername = 4;

  string Name = 5;
  string Description = 6;
  int32 Order = 7;

  sliverpb.Malleable Profile = 8;
  string StageImplant = 9;
}


// [ Jobs ]  ----------------------------------------
message Jobs {
  repeated Job Active = 1;
}

message KillJobReq {
  string ID = 1;
}

message KillJob {
  string ID = 1;
  bool Success = 2;
}

// [ C2 Profiles ] ----------------------------------------

message CreateMalleableReq {
  sliverpb.Malleable Profile = 1;
  commonpb.Request Request = 9;
}

message CreateMalleable {
  sliverpb.Malleable Profile = 1;
  commonpb.Response Response = 9;
}

message DeleteMalleableReq {
  sliverpb.Malleable Profile = 1;
  commonpb.Request Request = 9;
}

message DeleteMalleable {
  commonpb.Response Response = 9;
}

message UpdateMalleableReq {
  sliverpb.Malleable Profile = 1;
  commonpb.Request Request = 9;
}
message UpdateMalleable {
  sliverpb.Malleable Updated = 1;
  commonpb.Response Response = 9;
}

message GetMalleablesReq {
  commonpb.Request Request = 9;
}

message GetMalleables {
  repeated sliverpb.Malleable Profiles = 1;
}

// [ C2 Handlers ] ---------------------------------------------

// The server requests an implant/the server to start a handler.
message HandlerStageReq {
  sliverpb.Malleable Profile = 1;
  commonpb.Request Request = 9;
}

message HandlerStage {
  bool Success = 1;
  commonpb.Response Response = 9;
}

enum StagerProtocol {
  TCP = 0;
  HTTP = 1;
  HTTPS = 2;
}

message HandlerStagerReq {
  StagerProtocol Protocol = 1;
  string StageImplant = 2;
  bytes StageBytes = 3;
  sliverpb.Malleable Profile = 5;
  commonpb.Request Request = 9;
}

message HandlerStager {
  bool Success = 1;
  commonpb.Response Response = 9;
}

// The server requests an implant/the server to stop a handler.
message HandlerCloseReq {
  sliverpb.Malleable Profile = 1;
  commonpb.Request Request = 9;
}

message HandlerClose {
  bool Success = 1;
  commonpb.Response Response = 9;
}

// [ commands ] ----------------------------------------

message Sessions {
  repeated Session Sessions = 1;
}

message UpdateSession {
  uint32 SessionID = 1;
  string Name = 2;
  int64 ReconnectInterval = 3;
  int64 PollInterval = 4;
  repeated string Extensions = 5;
}

message GenerateReq {
  ImplantConfig Config = 1;

  commonpb.Request Request = 9;
}

message Generate {
  commonpb.File File = 1;
}

message MSFReq {
  string Payload = 1;
  string LHost = 2;
  uint32 LPort = 3;
  string Encoder = 4;
  int32 Iterations = 5;

  commonpb.Request Request = 9;
}

message MSFRemoteReq {
  string Payload = 1;
  string LHost = 2;
  uint32 LPort = 3;
  string Encoder = 4;
  int32 Iterations = 5;
  uint32 PID = 8;

  commonpb.Request Request = 9;
}

message ShellcodeRDIReq {
  bytes Data = 1;
  string FunctionName = 2;
  string Arguments = 3;

  commonpb.Request Request = 9;
}

message ShellcodeRDI {
  bytes Data = 1;
}

message MsfStagerReq {
  string Arch = 1;
  string Format = 2;
  uint32 Port = 3;
  string Host = 4;
  string OS = 5; // reserved for future usage
  StagerProtocol Protocol = 6;
  repeated string BadChars = 7;

  commonpb.Request Request = 9;
}

message MsfStager {
  commonpb.File File = 1;

  commonpb.Request Request = 9;
}

// GetSystemReq - Client request to the server which is translated into
//                InvokeSystemReq when sending to the implant.
message GetSystemReq {
  string HostingProcess = 1;
  ImplantConfig Config = 2;

  commonpb.Request Request = 9;
}

// MigrateReq - Client request to the server which is translated into
//              InvokeMigrateReq when sending to the implant.
message MigrateReq {
  uint32 Pid = 1;
  ImplantConfig Config = 2;

  commonpb.Request Request = 9;
}

// [ Tunnels ] ----------------------------------------
message CreateTunnelReq {

  commonpb.Request Request = 9;
}

message CreateTunnel {
  uint32 SessionID = 1;

  uint64 TunnelID = 8 [jstype = JS_STRING];
}

message CloseTunnelReq {
  uint64 TunnelID = 8 [jstype = JS_STRING];

  commonpb.Request Request = 9;
}

// [ Events ] ----------------------------------------
message Client {
  string ID = 1;
  string Name = 2;

  Operator Operator = 3;
}

message Event {
  EventType Type = 1;
  string Name = 2;
  string Component = 3;
  Level Level = 4;
  bytes Data = 5;
  string Err = 6; // Can't trigger normal gRPC error

  Client Client = 10;
  Job Job = 12;
  Session Session = 13;
  Beacon Beacon = 14;
}

// EventType - All major types of events 
enum EventType {
  // Base
  Log = 0;
  UserJoined = 1;
  UserLeft = 2;
  CanaryBurned = 3;
  Watchtower = 4;
  JobStarted = 5;
  JobStopped = 6;

  // Implants
  Profile = 7;
  BuildCompleted = 8;
  BuildDeleted = 9;

  // C2
  Handler = 11;
  WebsiteEvent = 12;

  // Sessions
  SessionOpened = 20;
  SessionUpdated = 21;
  SessionClosed = 22;

  // Beacons
  BeaconRegistered = 31;
  BeaconUpdated = 32;
  BeaconRemoved = 33;
  BeaconTaskResult = 34;

  // Loot
  LootAdded = 40;
  LootRemoved = 41;
}

// Level - Some components in Sliver will push to the event system through 
// logger hooks, for more granular output of log information.
enum Level {
        TRACE = 0;
        DEBUG = 1;
        INFO = 2;
        WARNING = 3;
        ERROR = 4;
        SUCCESS = 5;
}

message Operators { 
  repeated Operator Operators = 1;
}

message Operator {
  bool Online = 1;
  string Name = 2;
}

// [ Websites ] ----------------------------------------
message WebContent {
  string Path = 1;
  string ContentType = 2;
  uint64 Size = 3 [jstype = JS_STRING];

  bytes Content = 9;
}

message WebsiteAddContent {
  string Name = 1;
  map<string, WebContent> Contents = 2;
}

message WebsiteRemoveContent { 
  string Name = 1;
  repeated string Paths = 2;
}

message Website {
  string Name = 1;
  map<string, WebContent> Contents = 2;
}

message Websites {
  repeated Website Websites = 1;
}


// [ Wireguard ] ----------------------------------------

message WGClientConfig {
  string ServerPubKey = 1;
  string ClientPrivateKey = 2;
  string ClientPubKey = 3;
  string ClientIP = 4;
}


// [ Loot ] ----------------------------------------
enum LootType {
  LOOT_FILE = 0;
  LOOT_CREDENTIAL = 1;
}

enum CredentialType {
  NO_CREDENTIAL = 0;
  USER_PASSWORD = 1;
  API_KEY = 2;
  FILE = 3;
}

enum FileType {
  NO_FILE = 0;
  BINARY = 1;
  TEXT = 2;
}

message Credential {
  
  // USER_PASSWORD
  string User = 2;
  string Password = 3;

  // API_KEY
  string APIKey = 4;
}

message Loot {
  LootType Type = 1;

  string LootID = 2;
  string Name = 3;

  CredentialType CredentialType = 4;
  Credential Credential = 5;
  FileType FileType = 6;

  commonpb.File File = 9;
}

message AllLoot {
  repeated Loot Loot = 1;
}

// [ Hosts ] ----------------------------------------
message IOC {
  string Path = 1;
  string FileHash = 2;
  string ID = 3;
}

message ExtensionData {
  string Output = 1;
}

message Host {
  string Hostname = 1;
  string HostUUID = 2;
  string OSVersion = 3;

  repeated IOC IOCs = 4;
  map<string, ExtensionData> ExtensionData = 5;
}

message AllHosts {
  repeated Host Hosts = 1;
}

// [ Dll Hijack ] ----------------------------------------
message DllHijackReq {
  string ReferenceDLLPath = 1;
  string TargetLocation = 2;
  bytes ReferenceDLL = 3;
  bytes TargetDLL = 4;
  string ProfileName = 5;

  commonpb.Request Request = 9;
}

message DllHijack {
  commonpb.Response Response = 9;
}
