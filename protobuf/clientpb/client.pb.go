// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: clientpb/client.proto

package clientpb

import (
	commonpb "github.com/bishopfox/sliver/protobuf/commonpb"
	sliverpb "github.com/bishopfox/sliver/protobuf/sliverpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// State - Current runtime &/or connectivity state of a session/beacon
type State int32

const (
	State_Alive      State = 0
	State_Dead       State = 1
	State_Sleep      State = 2
	State_Switching  State = 3
	State_Disconnect State = 4
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "Alive",
		1: "Dead",
		2: "Sleep",
		3: "Switching",
		4: "Disconnect",
	}
	State_value = map[string]int32{
		"Alive":      0,
		"Dead":       1,
		"Sleep":      2,
		"Switching":  3,
		"Disconnect": 4,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_clientpb_client_proto_enumTypes[0].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_clientpb_client_proto_enumTypes[0]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{0}
}

type OutputFormat int32

const (
	OutputFormat_SHARED_LIB OutputFormat = 0
	OutputFormat_SHELLCODE  OutputFormat = 1
	OutputFormat_EXECUTABLE OutputFormat = 2
	OutputFormat_SERVICE    OutputFormat = 3
)

// Enum value maps for OutputFormat.
var (
	OutputFormat_name = map[int32]string{
		0: "SHARED_LIB",
		1: "SHELLCODE",
		2: "EXECUTABLE",
		3: "SERVICE",
	}
	OutputFormat_value = map[string]int32{
		"SHARED_LIB": 0,
		"SHELLCODE":  1,
		"EXECUTABLE": 2,
		"SERVICE":    3,
	}
)

func (x OutputFormat) Enum() *OutputFormat {
	p := new(OutputFormat)
	*p = x
	return p
}

func (x OutputFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutputFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_clientpb_client_proto_enumTypes[1].Descriptor()
}

func (OutputFormat) Type() protoreflect.EnumType {
	return &file_clientpb_client_proto_enumTypes[1]
}

func (x OutputFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OutputFormat.Descriptor instead.
func (OutputFormat) EnumDescriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{1}
}

type StagerProtocol int32

const (
	StagerProtocol_TCP   StagerProtocol = 0
	StagerProtocol_HTTP  StagerProtocol = 1
	StagerProtocol_HTTPS StagerProtocol = 2
)

// Enum value maps for StagerProtocol.
var (
	StagerProtocol_name = map[int32]string{
		0: "TCP",
		1: "HTTP",
		2: "HTTPS",
	}
	StagerProtocol_value = map[string]int32{
		"TCP":   0,
		"HTTP":  1,
		"HTTPS": 2,
	}
)

func (x StagerProtocol) Enum() *StagerProtocol {
	p := new(StagerProtocol)
	*p = x
	return p
}

func (x StagerProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StagerProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_clientpb_client_proto_enumTypes[2].Descriptor()
}

func (StagerProtocol) Type() protoreflect.EnumType {
	return &file_clientpb_client_proto_enumTypes[2]
}

func (x StagerProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StagerProtocol.Descriptor instead.
func (StagerProtocol) EnumDescriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{2}
}

// EventType - All major types of events
type EventType int32

const (
	// Base
	EventType_Log          EventType = 0
	EventType_UserJoined   EventType = 1
	EventType_UserLeft     EventType = 2
	EventType_CanaryBurned EventType = 3
	EventType_Watchtower   EventType = 4
	EventType_JobStarted   EventType = 5
	EventType_JobStopped   EventType = 6
	// Implants
	EventType_Profile        EventType = 7
	EventType_BuildCompleted EventType = 8
	EventType_BuildDeleted   EventType = 9
	// C2
	EventType_Handler      EventType = 11
	EventType_WebsiteEvent EventType = 12
	// Sessions
	EventType_SessionOpened  EventType = 20
	EventType_SessionUpdated EventType = 21
	EventType_SessionClosed  EventType = 22
	// Beacons
	EventType_BeaconRegistered EventType = 31
	EventType_BeaconUpdated    EventType = 32
	EventType_BeaconRemoved    EventType = 33
	EventType_BeaconTaskResult EventType = 34
	// Loot
	EventType_LootAdded   EventType = 40
	EventType_LootRemoved EventType = 41
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:  "Log",
		1:  "UserJoined",
		2:  "UserLeft",
		3:  "CanaryBurned",
		4:  "Watchtower",
		5:  "JobStarted",
		6:  "JobStopped",
		7:  "Profile",
		8:  "BuildCompleted",
		9:  "BuildDeleted",
		11: "Handler",
		12: "WebsiteEvent",
		20: "SessionOpened",
		21: "SessionUpdated",
		22: "SessionClosed",
		31: "BeaconRegistered",
		32: "BeaconUpdated",
		33: "BeaconRemoved",
		34: "BeaconTaskResult",
		40: "LootAdded",
		41: "LootRemoved",
	}
	EventType_value = map[string]int32{
		"Log":              0,
		"UserJoined":       1,
		"UserLeft":         2,
		"CanaryBurned":     3,
		"Watchtower":       4,
		"JobStarted":       5,
		"JobStopped":       6,
		"Profile":          7,
		"BuildCompleted":   8,
		"BuildDeleted":     9,
		"Handler":          11,
		"WebsiteEvent":     12,
		"SessionOpened":    20,
		"SessionUpdated":   21,
		"SessionClosed":    22,
		"BeaconRegistered": 31,
		"BeaconUpdated":    32,
		"BeaconRemoved":    33,
		"BeaconTaskResult": 34,
		"LootAdded":        40,
		"LootRemoved":      41,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_clientpb_client_proto_enumTypes[3].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_clientpb_client_proto_enumTypes[3]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{3}
}

// Level - Some components in Sliver will push to the event system through
// logger hooks, for more granular output of log information.
type Level int32

const (
	Level_TRACE   Level = 0
	Level_DEBUG   Level = 1
	Level_INFO    Level = 2
	Level_WARNING Level = 3
	Level_ERROR   Level = 4
	Level_SUCCESS Level = 5
)

// Enum value maps for Level.
var (
	Level_name = map[int32]string{
		0: "TRACE",
		1: "DEBUG",
		2: "INFO",
		3: "WARNING",
		4: "ERROR",
		5: "SUCCESS",
	}
	Level_value = map[string]int32{
		"TRACE":   0,
		"DEBUG":   1,
		"INFO":    2,
		"WARNING": 3,
		"ERROR":   4,
		"SUCCESS": 5,
	}
)

func (x Level) Enum() *Level {
	p := new(Level)
	*p = x
	return p
}

func (x Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Level) Descriptor() protoreflect.EnumDescriptor {
	return file_clientpb_client_proto_enumTypes[4].Descriptor()
}

func (Level) Type() protoreflect.EnumType {
	return &file_clientpb_client_proto_enumTypes[4]
}

func (x Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Level.Descriptor instead.
func (Level) EnumDescriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{4}
}

// [ Loot ] ----------------------------------------
type LootType int32

const (
	LootType_LOOT_FILE       LootType = 0
	LootType_LOOT_CREDENTIAL LootType = 1
)

// Enum value maps for LootType.
var (
	LootType_name = map[int32]string{
		0: "LOOT_FILE",
		1: "LOOT_CREDENTIAL",
	}
	LootType_value = map[string]int32{
		"LOOT_FILE":       0,
		"LOOT_CREDENTIAL": 1,
	}
)

func (x LootType) Enum() *LootType {
	p := new(LootType)
	*p = x
	return p
}

func (x LootType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LootType) Descriptor() protoreflect.EnumDescriptor {
	return file_clientpb_client_proto_enumTypes[5].Descriptor()
}

func (LootType) Type() protoreflect.EnumType {
	return &file_clientpb_client_proto_enumTypes[5]
}

func (x LootType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LootType.Descriptor instead.
func (LootType) EnumDescriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{5}
}

type CredentialType int32

const (
	CredentialType_NO_CREDENTIAL CredentialType = 0
	CredentialType_USER_PASSWORD CredentialType = 1
	CredentialType_API_KEY       CredentialType = 2
	CredentialType_FILE          CredentialType = 3
)

// Enum value maps for CredentialType.
var (
	CredentialType_name = map[int32]string{
		0: "NO_CREDENTIAL",
		1: "USER_PASSWORD",
		2: "API_KEY",
		3: "FILE",
	}
	CredentialType_value = map[string]int32{
		"NO_CREDENTIAL": 0,
		"USER_PASSWORD": 1,
		"API_KEY":       2,
		"FILE":          3,
	}
)

func (x CredentialType) Enum() *CredentialType {
	p := new(CredentialType)
	*p = x
	return p
}

func (x CredentialType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CredentialType) Descriptor() protoreflect.EnumDescriptor {
	return file_clientpb_client_proto_enumTypes[6].Descriptor()
}

func (CredentialType) Type() protoreflect.EnumType {
	return &file_clientpb_client_proto_enumTypes[6]
}

func (x CredentialType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CredentialType.Descriptor instead.
func (CredentialType) EnumDescriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{6}
}

type FileType int32

const (
	FileType_NO_FILE FileType = 0
	FileType_BINARY  FileType = 1
	FileType_TEXT    FileType = 2
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0: "NO_FILE",
		1: "BINARY",
		2: "TEXT",
	}
	FileType_value = map[string]int32{
		"NO_FILE": 0,
		"BINARY":  1,
		"TEXT":    2,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_clientpb_client_proto_enumTypes[7].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_clientpb_client_proto_enumTypes[7]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{7}
}

// [ Version ] ----------------------------------------
type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Major      int32  `protobuf:"varint,1,opt,name=Major,proto3" json:"Major,omitempty"`
	Minor      int32  `protobuf:"varint,2,opt,name=Minor,proto3" json:"Minor,omitempty"`
	Patch      int32  `protobuf:"varint,3,opt,name=Patch,proto3" json:"Patch,omitempty"`
	Commit     string `protobuf:"bytes,4,opt,name=Commit,proto3" json:"Commit,omitempty"`
	Dirty      bool   `protobuf:"varint,5,opt,name=Dirty,proto3" json:"Dirty,omitempty"`
	CompiledAt int64  `protobuf:"varint,6,opt,name=CompiledAt,proto3" json:"CompiledAt,omitempty"`
	OS         string `protobuf:"bytes,7,opt,name=OS,proto3" json:"OS,omitempty"`
	Arch       string `protobuf:"bytes,8,opt,name=Arch,proto3" json:"Arch,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{0}
}

func (x *Version) GetMajor() int32 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *Version) GetMinor() int32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *Version) GetPatch() int32 {
	if x != nil {
		return x.Patch
	}
	return 0
}

func (x *Version) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *Version) GetDirty() bool {
	if x != nil {
		return x.Dirty
	}
	return false
}

func (x *Version) GetCompiledAt() int64 {
	if x != nil {
		return x.CompiledAt
	}
	return 0
}

func (x *Version) GetOS() string {
	if x != nil {
		return x.OS
	}
	return ""
}

func (x *Version) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

// AddCmdHistoryRequest - Consoles send their commands each time.
// If the current command is executed in an implant context,
// the precise UUID is passed along, so that each implant host has
// one unified history, and all sessions created on the same host,
// will share the same set.
type AddCmdHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line    string            `protobuf:"bytes,1,opt,name=Line,proto3" json:"Line,omitempty"`
	Session *Session          `protobuf:"bytes,2,opt,name=Session,proto3" json:"Session,omitempty"`
	Beacon  *Beacon           `protobuf:"bytes,3,opt,name=Beacon,proto3" json:"Beacon,omitempty"`
	Request *commonpb.Request `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *AddCmdHistoryRequest) Reset() {
	*x = AddCmdHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCmdHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCmdHistoryRequest) ProtoMessage() {}

func (x *AddCmdHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCmdHistoryRequest.ProtoReflect.Descriptor instead.
func (*AddCmdHistoryRequest) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{1}
}

func (x *AddCmdHistoryRequest) GetLine() string {
	if x != nil {
		return x.Line
	}
	return ""
}

func (x *AddCmdHistoryRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *AddCmdHistoryRequest) GetBeacon() *Beacon {
	if x != nil {
		return x.Beacon
	}
	return nil
}

func (x *AddCmdHistoryRequest) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type AddCmdHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Doublon  bool               `protobuf:"varint,1,opt,name=Doublon,proto3" json:"Doublon,omitempty"`
	User     []string           `protobuf:"bytes,2,rep,name=User,proto3" json:"User,omitempty"`
	Sliver   []string           `protobuf:"bytes,3,rep,name=Sliver,proto3" json:"Sliver,omitempty"`
	Response *commonpb.Response `protobuf:"bytes,9,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *AddCmdHistory) Reset() {
	*x = AddCmdHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCmdHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCmdHistory) ProtoMessage() {}

func (x *AddCmdHistory) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCmdHistory.ProtoReflect.Descriptor instead.
func (*AddCmdHistory) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{2}
}

func (x *AddCmdHistory) GetDoublon() bool {
	if x != nil {
		return x.Doublon
	}
	return false
}

func (x *AddCmdHistory) GetUser() []string {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AddCmdHistory) GetSliver() []string {
	if x != nil {
		return x.Sliver
	}
	return nil
}

func (x *AddCmdHistory) GetResponse() *commonpb.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

// HistoryRequest - A console wants a command history.
// We may ask for two sets of history at once: the user, and a session
type HistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllConsoles bool              `protobuf:"varint,1,opt,name=AllConsoles,proto3" json:"AllConsoles,omitempty"`
	Index       int32             `protobuf:"varint,2,opt,name=Index,proto3" json:"Index,omitempty"`
	Session     *Session          `protobuf:"bytes,3,opt,name=Session,proto3" json:"Session,omitempty"`
	Beacon      *Beacon           `protobuf:"bytes,4,opt,name=Beacon,proto3" json:"Beacon,omitempty"`
	Request     *commonpb.Request `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *HistoryRequest) Reset() {
	*x = HistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryRequest) ProtoMessage() {}

func (x *HistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryRequest.ProtoReflect.Descriptor instead.
func (*HistoryRequest) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{3}
}

func (x *HistoryRequest) GetAllConsoles() bool {
	if x != nil {
		return x.AllConsoles
	}
	return false
}

func (x *HistoryRequest) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *HistoryRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *HistoryRequest) GetBeacon() *Beacon {
	if x != nil {
		return x.Beacon
	}
	return nil
}

func (x *HistoryRequest) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

// History - Command history content.
type History struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User             []string           `protobuf:"bytes,2,rep,name=User,proto3" json:"User,omitempty"`
	UserHistLength   int32              `protobuf:"varint,3,opt,name=UserHistLength,proto3" json:"UserHistLength,omitempty"`
	Sliver           []string           `protobuf:"bytes,4,rep,name=Sliver,proto3" json:"Sliver,omitempty"`
	SliverHistLength int32              `protobuf:"varint,5,opt,name=SliverHistLength,proto3" json:"SliverHistLength,omitempty"`
	Response         *commonpb.Response `protobuf:"bytes,9,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *History) Reset() {
	*x = History{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *History) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*History) ProtoMessage() {}

func (x *History) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use History.ProtoReflect.Descriptor instead.
func (*History) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{4}
}

func (x *History) GetUser() []string {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *History) GetUserHistLength() int32 {
	if x != nil {
		return x.UserHistLength
	}
	return 0
}

func (x *History) GetSliver() []string {
	if x != nil {
		return x.Sliver
	}
	return nil
}

func (x *History) GetSliverHistLength() int32 {
	if x != nil {
		return x.SliverHistLength
	}
	return 0
}

func (x *History) GetResponse() *commonpb.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

// Ask for config
type GetConsoleConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientID string            `protobuf:"bytes,1,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	Request  *commonpb.Request `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *GetConsoleConfigReq) Reset() {
	*x = GetConsoleConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsoleConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsoleConfigReq) ProtoMessage() {}

func (x *GetConsoleConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsoleConfigReq.ProtoReflect.Descriptor instead.
func (*GetConsoleConfigReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{5}
}

func (x *GetConsoleConfigReq) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *GetConsoleConfigReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

// Get config
type GetConsoleConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config   []byte             `protobuf:"bytes,1,opt,name=Config,proto3" json:"Config,omitempty"`
	ClientID string             `protobuf:"bytes,2,opt,name=ClientID,proto3" json:"ClientID,omitempty"` // Sent back to identify this precise client
	Response *commonpb.Response `protobuf:"bytes,9,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *GetConsoleConfig) Reset() {
	*x = GetConsoleConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsoleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsoleConfig) ProtoMessage() {}

func (x *GetConsoleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsoleConfig.ProtoReflect.Descriptor instead.
func (*GetConsoleConfig) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{6}
}

func (x *GetConsoleConfig) GetConfig() []byte {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *GetConsoleConfig) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *GetConsoleConfig) GetResponse() *commonpb.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

// Save the config
type SaveConsoleConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config  []byte            `protobuf:"bytes,1,opt,name=Config,proto3" json:"Config,omitempty"`
	Request *commonpb.Request `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *SaveConsoleConfigReq) Reset() {
	*x = SaveConsoleConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveConsoleConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveConsoleConfigReq) ProtoMessage() {}

func (x *SaveConsoleConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveConsoleConfigReq.ProtoReflect.Descriptor instead.
func (*SaveConsoleConfigReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{7}
}

func (x *SaveConsoleConfigReq) GetConfig() []byte {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *SaveConsoleConfigReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

// Saved
type SaveConsoleConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *commonpb.Response `protobuf:"bytes,9,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *SaveConsoleConfig) Reset() {
	*x = SaveConsoleConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveConsoleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveConsoleConfig) ProtoMessage() {}

func (x *SaveConsoleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveConsoleConfig.ProtoReflect.Descriptor instead.
func (*SaveConsoleConfig) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{8}
}

func (x *SaveConsoleConfig) GetResponse() *commonpb.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

// Ask for settings
type GetSliverSettingsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *commonpb.Request `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *GetSliverSettingsReq) Reset() {
	*x = GetSliverSettingsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSliverSettingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSliverSettingsReq) ProtoMessage() {}

func (x *GetSliverSettingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSliverSettingsReq.ProtoReflect.Descriptor instead.
func (*GetSliverSettingsReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{9}
}

func (x *GetSliverSettingsReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

// Get settings
type GetSliverSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings []byte             `protobuf:"bytes,1,opt,name=Settings,proto3" json:"Settings,omitempty"`
	Response *commonpb.Response `protobuf:"bytes,9,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *GetSliverSettings) Reset() {
	*x = GetSliverSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSliverSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSliverSettings) ProtoMessage() {}

func (x *GetSliverSettings) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSliverSettings.ProtoReflect.Descriptor instead.
func (*GetSliverSettings) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{10}
}

func (x *GetSliverSettings) GetSettings() []byte {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *GetSliverSettings) GetResponse() *commonpb.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

// Save the settings
type SaveSliverSettingsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings []byte            `protobuf:"bytes,1,opt,name=Settings,proto3" json:"Settings,omitempty"`
	Request  *commonpb.Request `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *SaveSliverSettingsReq) Reset() {
	*x = SaveSliverSettingsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveSliverSettingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveSliverSettingsReq) ProtoMessage() {}

func (x *SaveSliverSettingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveSliverSettingsReq.ProtoReflect.Descriptor instead.
func (*SaveSliverSettingsReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{11}
}

func (x *SaveSliverSettingsReq) GetSettings() []byte {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *SaveSliverSettingsReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

// Saved
type SaveSliverSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *commonpb.Response `protobuf:"bytes,9,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *SaveSliverSettings) Reset() {
	*x = SaveSliverSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveSliverSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveSliverSettings) ProtoMessage() {}

func (x *SaveSliverSettings) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveSliverSettings.ProtoReflect.Descriptor instead.
func (*SaveSliverSettings) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{12}
}

func (x *SaveSliverSettings) GetResponse() *commonpb.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	BeaconID          string   `protobuf:"bytes,200,opt,name=BeaconID,proto3" json:"BeaconID,omitempty"` // Associated runtime beacon, if any
	Name              string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Hostname          string   `protobuf:"bytes,3,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	HostUUID          string   `protobuf:"bytes,4,opt,name=HostUUID,proto3" json:"HostUUID,omitempty"`
	Username          string   `protobuf:"bytes,5,opt,name=Username,proto3" json:"Username,omitempty"`
	UID               string   `protobuf:"bytes,6,opt,name=UID,proto3" json:"UID,omitempty"`
	GID               string   `protobuf:"bytes,7,opt,name=GID,proto3" json:"GID,omitempty"`
	OS                string   `protobuf:"bytes,8,opt,name=OS,proto3" json:"OS,omitempty"`
	Arch              string   `protobuf:"bytes,9,opt,name=Arch,proto3" json:"Arch,omitempty"`
	Transport         string   `protobuf:"bytes,10,opt,name=Transport,proto3" json:"Transport,omitempty"`
	RemoteAddress     string   `protobuf:"bytes,11,opt,name=RemoteAddress,proto3" json:"RemoteAddress,omitempty"`
	PID               int32    `protobuf:"varint,12,opt,name=PID,proto3" json:"PID,omitempty"`
	Filename          string   `protobuf:"bytes,13,opt,name=Filename,proto3" json:"Filename,omitempty"` // Argv[0]
	LastCheckin       int64    `protobuf:"varint,14,opt,name=LastCheckin,proto3" json:"LastCheckin,omitempty"`
	ActiveC2          string   `protobuf:"bytes,15,opt,name=ActiveC2,proto3" json:"ActiveC2,omitempty"`
	Version           string   `protobuf:"bytes,16,opt,name=Version,proto3" json:"Version,omitempty"`
	Evasion           bool     `protobuf:"varint,17,opt,name=Evasion,proto3" json:"Evasion,omitempty"`
	State             State    `protobuf:"varint,18,opt,name=State,proto3,enum=clientpb.State" json:"State,omitempty"`
	ReconnectInterval int64    `protobuf:"varint,19,opt,name=ReconnectInterval,proto3" json:"ReconnectInterval,omitempty"`
	ProxyURL          string   `protobuf:"bytes,20,opt,name=ProxyURL,proto3" json:"ProxyURL,omitempty"`
	PollTimeout       int64    `protobuf:"varint,21,opt,name=PollTimeout,proto3" json:"PollTimeout,omitempty"`
	Burned            bool     `protobuf:"varint,22,opt,name=Burned,proto3" json:"Burned,omitempty"`
	Extensions        []string `protobuf:"bytes,23,rep,name=Extensions,proto3" json:"Extensions,omitempty"`
	// string ConfigID = 24;
	WorkingDirectory string `protobuf:"bytes,25,opt,name=WorkingDirectory,proto3" json:"WorkingDirectory,omitempty"`
	TransportID      string `protobuf:"bytes,26,opt,name=TransportID,proto3" json:"TransportID,omitempty"`
	UUID             string `protobuf:"bytes,27,opt,name=UUID,proto3" json:"UUID,omitempty"` // generated at runtime by the session
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{13}
}

func (x *Session) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Session) GetBeaconID() string {
	if x != nil {
		return x.BeaconID
	}
	return ""
}

func (x *Session) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Session) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Session) GetHostUUID() string {
	if x != nil {
		return x.HostUUID
	}
	return ""
}

func (x *Session) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Session) GetUID() string {
	if x != nil {
		return x.UID
	}
	return ""
}

func (x *Session) GetGID() string {
	if x != nil {
		return x.GID
	}
	return ""
}

func (x *Session) GetOS() string {
	if x != nil {
		return x.OS
	}
	return ""
}

func (x *Session) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *Session) GetTransport() string {
	if x != nil {
		return x.Transport
	}
	return ""
}

func (x *Session) GetRemoteAddress() string {
	if x != nil {
		return x.RemoteAddress
	}
	return ""
}

func (x *Session) GetPID() int32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *Session) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Session) GetLastCheckin() int64 {
	if x != nil {
		return x.LastCheckin
	}
	return 0
}

func (x *Session) GetActiveC2() string {
	if x != nil {
		return x.ActiveC2
	}
	return ""
}

func (x *Session) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Session) GetEvasion() bool {
	if x != nil {
		return x.Evasion
	}
	return false
}

func (x *Session) GetState() State {
	if x != nil {
		return x.State
	}
	return State_Alive
}

func (x *Session) GetReconnectInterval() int64 {
	if x != nil {
		return x.ReconnectInterval
	}
	return 0
}

func (x *Session) GetProxyURL() string {
	if x != nil {
		return x.ProxyURL
	}
	return ""
}

func (x *Session) GetPollTimeout() int64 {
	if x != nil {
		return x.PollTimeout
	}
	return 0
}

func (x *Session) GetBurned() bool {
	if x != nil {
		return x.Burned
	}
	return false
}

func (x *Session) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *Session) GetWorkingDirectory() string {
	if x != nil {
		return x.WorkingDirectory
	}
	return ""
}

func (x *Session) GetTransportID() string {
	if x != nil {
		return x.TransportID
	}
	return ""
}

func (x *Session) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type Beacon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	SessionID           string `protobuf:"bytes,200,opt,name=SessionID,proto3" json:"SessionID,omitempty"` // Associated runtime session, if any
	Name                string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Hostname            string `protobuf:"bytes,3,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	UUID                string `protobuf:"bytes,4,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Username            string `protobuf:"bytes,5,opt,name=Username,proto3" json:"Username,omitempty"`
	UID                 string `protobuf:"bytes,6,opt,name=UID,proto3" json:"UID,omitempty"`
	GID                 string `protobuf:"bytes,7,opt,name=GID,proto3" json:"GID,omitempty"`
	OS                  string `protobuf:"bytes,8,opt,name=OS,proto3" json:"OS,omitempty"`
	Arch                string `protobuf:"bytes,9,opt,name=Arch,proto3" json:"Arch,omitempty"`
	Transport           string `protobuf:"bytes,10,opt,name=Transport,proto3" json:"Transport,omitempty"`
	RemoteAddress       string `protobuf:"bytes,11,opt,name=RemoteAddress,proto3" json:"RemoteAddress,omitempty"`
	PID                 int32  `protobuf:"varint,12,opt,name=PID,proto3" json:"PID,omitempty"`
	Filename            string `protobuf:"bytes,13,opt,name=Filename,proto3" json:"Filename,omitempty"` // Argv[0]
	LastCheckin         int64  `protobuf:"varint,14,opt,name=LastCheckin,proto3" json:"LastCheckin,omitempty"`
	ActiveC2            string `protobuf:"bytes,15,opt,name=ActiveC2,proto3" json:"ActiveC2,omitempty"`
	Version             string `protobuf:"bytes,16,opt,name=Version,proto3" json:"Version,omitempty"`
	Evasion             bool   `protobuf:"varint,17,opt,name=Evasion,proto3" json:"Evasion,omitempty"`
	State               State  `protobuf:"varint,18,opt,name=State,proto3,enum=clientpb.State" json:"State,omitempty"`
	WorkingDirectory    string `protobuf:"bytes,19,opt,name=WorkingDirectory,proto3" json:"WorkingDirectory,omitempty"`
	ReconnectInterval   int64  `protobuf:"varint,30,opt,name=ReconnectInterval,proto3" json:"ReconnectInterval,omitempty"`
	PollTimeout         int64  `protobuf:"varint,31,opt,name=PollTimeout,proto3" json:"PollTimeout,omitempty"`
	ProxyURL            string `protobuf:"bytes,20,opt,name=ProxyURL,proto3" json:"ProxyURL,omitempty"`
	Interval            int64  `protobuf:"varint,21,opt,name=Interval,proto3" json:"Interval,omitempty"`
	Jitter              int64  `protobuf:"varint,22,opt,name=Jitter,proto3" json:"Jitter,omitempty"`
	Burned              bool   `protobuf:"varint,23,opt,name=Burned,proto3" json:"Burned,omitempty"`
	NextCheckin         int64  `protobuf:"varint,24,opt,name=NextCheckin,proto3" json:"NextCheckin,omitempty"`
	TransportID         string `protobuf:"bytes,25,opt,name=TransportID,proto3" json:"TransportID,omitempty"`
	TasksCount          int64  `protobuf:"varint,26,opt,name=TasksCount,proto3" json:"TasksCount,omitempty"`
	TasksCountCompleted int64  `protobuf:"varint,27,opt,name=TasksCountCompleted,proto3" json:"TasksCountCompleted,omitempty"`
}

func (x *Beacon) Reset() {
	*x = Beacon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Beacon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Beacon) ProtoMessage() {}

func (x *Beacon) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Beacon.ProtoReflect.Descriptor instead.
func (*Beacon) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{14}
}

func (x *Beacon) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Beacon) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *Beacon) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Beacon) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Beacon) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Beacon) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Beacon) GetUID() string {
	if x != nil {
		return x.UID
	}
	return ""
}

func (x *Beacon) GetGID() string {
	if x != nil {
		return x.GID
	}
	return ""
}

func (x *Beacon) GetOS() string {
	if x != nil {
		return x.OS
	}
	return ""
}

func (x *Beacon) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *Beacon) GetTransport() string {
	if x != nil {
		return x.Transport
	}
	return ""
}

func (x *Beacon) GetRemoteAddress() string {
	if x != nil {
		return x.RemoteAddress
	}
	return ""
}

func (x *Beacon) GetPID() int32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *Beacon) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Beacon) GetLastCheckin() int64 {
	if x != nil {
		return x.LastCheckin
	}
	return 0
}

func (x *Beacon) GetActiveC2() string {
	if x != nil {
		return x.ActiveC2
	}
	return ""
}

func (x *Beacon) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Beacon) GetEvasion() bool {
	if x != nil {
		return x.Evasion
	}
	return false
}

func (x *Beacon) GetState() State {
	if x != nil {
		return x.State
	}
	return State_Alive
}

func (x *Beacon) GetWorkingDirectory() string {
	if x != nil {
		return x.WorkingDirectory
	}
	return ""
}

func (x *Beacon) GetReconnectInterval() int64 {
	if x != nil {
		return x.ReconnectInterval
	}
	return 0
}

func (x *Beacon) GetPollTimeout() int64 {
	if x != nil {
		return x.PollTimeout
	}
	return 0
}

func (x *Beacon) GetProxyURL() string {
	if x != nil {
		return x.ProxyURL
	}
	return ""
}

func (x *Beacon) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *Beacon) GetJitter() int64 {
	if x != nil {
		return x.Jitter
	}
	return 0
}

func (x *Beacon) GetBurned() bool {
	if x != nil {
		return x.Burned
	}
	return false
}

func (x *Beacon) GetNextCheckin() int64 {
	if x != nil {
		return x.NextCheckin
	}
	return 0
}

func (x *Beacon) GetTransportID() string {
	if x != nil {
		return x.TransportID
	}
	return ""
}

func (x *Beacon) GetTasksCount() int64 {
	if x != nil {
		return x.TasksCount
	}
	return 0
}

func (x *Beacon) GetTasksCountCompleted() int64 {
	if x != nil {
		return x.TasksCountCompleted
	}
	return 0
}

type Beacons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beacons []*Beacon `protobuf:"bytes,2,rep,name=Beacons,proto3" json:"Beacons,omitempty"`
}

func (x *Beacons) Reset() {
	*x = Beacons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Beacons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Beacons) ProtoMessage() {}

func (x *Beacons) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Beacons.ProtoReflect.Descriptor instead.
func (*Beacons) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{15}
}

func (x *Beacons) GetBeacons() []*Beacon {
	if x != nil {
		return x.Beacons
	}
	return nil
}

type BeaconTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	BeaconID    string `protobuf:"bytes,2,opt,name=BeaconID,proto3" json:"BeaconID,omitempty"`
	CreatedAt   int64  `protobuf:"varint,3,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	State       string `protobuf:"bytes,4,opt,name=State,proto3" json:"State,omitempty"`
	SentAt      int64  `protobuf:"varint,5,opt,name=SentAt,proto3" json:"SentAt,omitempty"`
	CompletedAt int64  `protobuf:"varint,6,opt,name=CompletedAt,proto3" json:"CompletedAt,omitempty"`
	Request     []byte `protobuf:"bytes,7,opt,name=Request,proto3" json:"Request,omitempty"`
	Response    []byte `protobuf:"bytes,8,opt,name=Response,proto3" json:"Response,omitempty"`
	Description string `protobuf:"bytes,9,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (x *BeaconTask) Reset() {
	*x = BeaconTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeaconTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconTask) ProtoMessage() {}

func (x *BeaconTask) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconTask.ProtoReflect.Descriptor instead.
func (*BeaconTask) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{16}
}

func (x *BeaconTask) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *BeaconTask) GetBeaconID() string {
	if x != nil {
		return x.BeaconID
	}
	return ""
}

func (x *BeaconTask) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BeaconTask) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *BeaconTask) GetSentAt() int64 {
	if x != nil {
		return x.SentAt
	}
	return 0
}

func (x *BeaconTask) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

func (x *BeaconTask) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *BeaconTask) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *BeaconTask) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type BeaconTasks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconID string        `protobuf:"bytes,1,opt,name=BeaconID,proto3" json:"BeaconID,omitempty"`
	Tasks    []*BeaconTask `protobuf:"bytes,2,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
}

func (x *BeaconTasks) Reset() {
	*x = BeaconTasks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeaconTasks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconTasks) ProtoMessage() {}

func (x *BeaconTasks) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconTasks.ProtoReflect.Descriptor instead.
func (*BeaconTasks) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{17}
}

func (x *BeaconTasks) GetBeaconID() string {
	if x != nil {
		return x.BeaconID
	}
	return ""
}

func (x *BeaconTasks) GetTasks() []*BeaconTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// ImplantConfig - Configuration necessary to build an implant.
// Most of its is related to the build itself, but not about
// its various C2 stacks. Those are stored in its list of C2Channel types.
type ImplantConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,100,opt,name=ID,proto3" json:"ID,omitempty"`
	// Platform
	GOOS   string `protobuf:"bytes,1,opt,name=GOOS,proto3" json:"GOOS,omitempty"`
	GOARCH string `protobuf:"bytes,2,opt,name=GOARCH,proto3" json:"GOARCH,omitempty"`
	// Build type
	Format      OutputFormat `protobuf:"varint,25,opt,name=Format,proto3,enum=clientpb.OutputFormat" json:"Format,omitempty"`
	IsSharedLib bool         `protobuf:"varint,26,opt,name=IsSharedLib,proto3" json:"IsSharedLib,omitempty"`
	IsService   bool         `protobuf:"varint,28,opt,name=IsService,proto3" json:"IsService,omitempty"`
	IsShellcode bool         `protobuf:"varint,29,opt,name=IsShellcode,proto3" json:"IsShellcode,omitempty"`
	// Standard
	Name             string   `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	FileName         string   `protobuf:"bytes,27,opt,name=FileName,proto3" json:"FileName,omitempty"`
	Debug            bool     `protobuf:"varint,7,opt,name=Debug,proto3" json:"Debug,omitempty"`
	Evasion          bool     `protobuf:"varint,31,opt,name=Evasion,proto3" json:"Evasion,omitempty"`
	ObfuscateSymbols bool     `protobuf:"varint,30,opt,name=ObfuscateSymbols,proto3" json:"ObfuscateSymbols,omitempty"`
	CanaryDomains    []string `protobuf:"bytes,11,rep,name=CanaryDomains,proto3" json:"CanaryDomains,omitempty"`
	// Limits
	LimitDomainJoined bool   `protobuf:"varint,20,opt,name=LimitDomainJoined,proto3" json:"LimitDomainJoined,omitempty"`
	LimitDatetime     string `protobuf:"bytes,21,opt,name=LimitDatetime,proto3" json:"LimitDatetime,omitempty"`
	LimitHostname     string `protobuf:"bytes,22,opt,name=LimitHostname,proto3" json:"LimitHostname,omitempty"`
	LimitUsername     string `protobuf:"bytes,23,opt,name=LimitUsername,proto3" json:"LimitUsername,omitempty"`
	LimitFileExists   string `protobuf:"bytes,32,opt,name=LimitFileExists,proto3" json:"LimitFileExists,omitempty"`
	// C2 stacks
	C2S                []*sliverpb.Malleable `protobuf:"bytes,15,rep,name=C2s,proto3" json:"C2s,omitempty"`
	RuntimeC2S         []string              `protobuf:"bytes,16,rep,name=RuntimeC2s,proto3" json:"RuntimeC2s,omitempty"`
	ConnectionStrategy string                `protobuf:"bytes,39,opt,name=ConnectionStrategy,proto3" json:"ConnectionStrategy,omitempty"`
	// SSH Comm system
	CommDisabled          bool   `protobuf:"varint,17,opt,name=CommDisabled,proto3" json:"CommDisabled,omitempty"`
	CommServerCert        string `protobuf:"bytes,40,opt,name=CommServerCert,proto3" json:"CommServerCert,omitempty"`
	CommServerKey         string `protobuf:"bytes,41,opt,name=CommServerKey,proto3" json:"CommServerKey,omitempty"`
	CommServerFingerprint string `protobuf:"bytes,42,opt,name=CommServerFingerprint,proto3" json:"CommServerFingerprint,omitempty"`
}

func (x *ImplantConfig) Reset() {
	*x = ImplantConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplantConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplantConfig) ProtoMessage() {}

func (x *ImplantConfig) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplantConfig.ProtoReflect.Descriptor instead.
func (*ImplantConfig) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{18}
}

func (x *ImplantConfig) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ImplantConfig) GetGOOS() string {
	if x != nil {
		return x.GOOS
	}
	return ""
}

func (x *ImplantConfig) GetGOARCH() string {
	if x != nil {
		return x.GOARCH
	}
	return ""
}

func (x *ImplantConfig) GetFormat() OutputFormat {
	if x != nil {
		return x.Format
	}
	return OutputFormat_SHARED_LIB
}

func (x *ImplantConfig) GetIsSharedLib() bool {
	if x != nil {
		return x.IsSharedLib
	}
	return false
}

func (x *ImplantConfig) GetIsService() bool {
	if x != nil {
		return x.IsService
	}
	return false
}

func (x *ImplantConfig) GetIsShellcode() bool {
	if x != nil {
		return x.IsShellcode
	}
	return false
}

func (x *ImplantConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImplantConfig) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ImplantConfig) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *ImplantConfig) GetEvasion() bool {
	if x != nil {
		return x.Evasion
	}
	return false
}

func (x *ImplantConfig) GetObfuscateSymbols() bool {
	if x != nil {
		return x.ObfuscateSymbols
	}
	return false
}

func (x *ImplantConfig) GetCanaryDomains() []string {
	if x != nil {
		return x.CanaryDomains
	}
	return nil
}

func (x *ImplantConfig) GetLimitDomainJoined() bool {
	if x != nil {
		return x.LimitDomainJoined
	}
	return false
}

func (x *ImplantConfig) GetLimitDatetime() string {
	if x != nil {
		return x.LimitDatetime
	}
	return ""
}

func (x *ImplantConfig) GetLimitHostname() string {
	if x != nil {
		return x.LimitHostname
	}
	return ""
}

func (x *ImplantConfig) GetLimitUsername() string {
	if x != nil {
		return x.LimitUsername
	}
	return ""
}

func (x *ImplantConfig) GetLimitFileExists() string {
	if x != nil {
		return x.LimitFileExists
	}
	return ""
}

func (x *ImplantConfig) GetC2S() []*sliverpb.Malleable {
	if x != nil {
		return x.C2S
	}
	return nil
}

func (x *ImplantConfig) GetRuntimeC2S() []string {
	if x != nil {
		return x.RuntimeC2S
	}
	return nil
}

func (x *ImplantConfig) GetConnectionStrategy() string {
	if x != nil {
		return x.ConnectionStrategy
	}
	return ""
}

func (x *ImplantConfig) GetCommDisabled() bool {
	if x != nil {
		return x.CommDisabled
	}
	return false
}

func (x *ImplantConfig) GetCommServerCert() string {
	if x != nil {
		return x.CommServerCert
	}
	return ""
}

func (x *ImplantConfig) GetCommServerKey() string {
	if x != nil {
		return x.CommServerKey
	}
	return ""
}

func (x *ImplantConfig) GetCommServerFingerprint() string {
	if x != nil {
		return x.CommServerFingerprint
	}
	return ""
}

// Configs of previously built implants
type ImplantBuilds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs map[string]*ImplantConfig `protobuf:"bytes,1,rep,name=Configs,proto3" json:"Configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ImplantBuilds) Reset() {
	*x = ImplantBuilds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplantBuilds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplantBuilds) ProtoMessage() {}

func (x *ImplantBuilds) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplantBuilds.ProtoReflect.Descriptor instead.
func (*ImplantBuilds) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{19}
}

func (x *ImplantBuilds) GetConfigs() map[string]*ImplantConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

type CompilerTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GOOS   string       `protobuf:"bytes,1,opt,name=GOOS,proto3" json:"GOOS,omitempty"`     // The server's OS
	GOARCH string       `protobuf:"bytes,2,opt,name=GOARCH,proto3" json:"GOARCH,omitempty"` // The server's Arch
	Format OutputFormat `protobuf:"varint,3,opt,name=Format,proto3,enum=clientpb.OutputFormat" json:"Format,omitempty"`
}

func (x *CompilerTarget) Reset() {
	*x = CompilerTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompilerTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompilerTarget) ProtoMessage() {}

func (x *CompilerTarget) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompilerTarget.ProtoReflect.Descriptor instead.
func (*CompilerTarget) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{20}
}

func (x *CompilerTarget) GetGOOS() string {
	if x != nil {
		return x.GOOS
	}
	return ""
}

func (x *CompilerTarget) GetGOARCH() string {
	if x != nil {
		return x.GOARCH
	}
	return ""
}

func (x *CompilerTarget) GetFormat() OutputFormat {
	if x != nil {
		return x.Format
	}
	return OutputFormat_SHARED_LIB
}

type CrossCompiler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetGOOS   string `protobuf:"bytes,1,opt,name=TargetGOOS,proto3" json:"TargetGOOS,omitempty"`     // The server's OS
	TargetGOARCH string `protobuf:"bytes,2,opt,name=TargetGOARCH,proto3" json:"TargetGOARCH,omitempty"` // The server's Arch
	CCPath       string `protobuf:"bytes,3,opt,name=CCPath,proto3" json:"CCPath,omitempty"`
	CXXPath      string `protobuf:"bytes,4,opt,name=CXXPath,proto3" json:"CXXPath,omitempty"`
}

func (x *CrossCompiler) Reset() {
	*x = CrossCompiler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossCompiler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossCompiler) ProtoMessage() {}

func (x *CrossCompiler) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossCompiler.ProtoReflect.Descriptor instead.
func (*CrossCompiler) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{21}
}

func (x *CrossCompiler) GetTargetGOOS() string {
	if x != nil {
		return x.TargetGOOS
	}
	return ""
}

func (x *CrossCompiler) GetTargetGOARCH() string {
	if x != nil {
		return x.TargetGOARCH
	}
	return ""
}

func (x *CrossCompiler) GetCCPath() string {
	if x != nil {
		return x.CCPath
	}
	return ""
}

func (x *CrossCompiler) GetCXXPath() string {
	if x != nil {
		return x.CXXPath
	}
	return ""
}

type Compiler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GOOS               string            `protobuf:"bytes,1,opt,name=GOOS,proto3" json:"GOOS,omitempty"`     // The server's OS
	GOARCH             string            `protobuf:"bytes,2,opt,name=GOARCH,proto3" json:"GOARCH,omitempty"` // The server's Arch
	Targets            []*CompilerTarget `protobuf:"bytes,3,rep,name=Targets,proto3" json:"Targets,omitempty"`
	CrossCompilers     []*CrossCompiler  `protobuf:"bytes,4,rep,name=CrossCompilers,proto3" json:"CrossCompilers,omitempty"`
	UnsupportedTargets []*CompilerTarget `protobuf:"bytes,5,rep,name=UnsupportedTargets,proto3" json:"UnsupportedTargets,omitempty"`
}

func (x *Compiler) Reset() {
	*x = Compiler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Compiler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compiler) ProtoMessage() {}

func (x *Compiler) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compiler.ProtoReflect.Descriptor instead.
func (*Compiler) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{22}
}

func (x *Compiler) GetGOOS() string {
	if x != nil {
		return x.GOOS
	}
	return ""
}

func (x *Compiler) GetGOARCH() string {
	if x != nil {
		return x.GOARCH
	}
	return ""
}

func (x *Compiler) GetTargets() []*CompilerTarget {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *Compiler) GetCrossCompilers() []*CrossCompiler {
	if x != nil {
		return x.CrossCompilers
	}
	return nil
}

func (x *Compiler) GetUnsupportedTargets() []*CompilerTarget {
	if x != nil {
		return x.UnsupportedTargets
	}
	return nil
}

type DeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *DeleteReq) Reset() {
	*x = DeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReq) ProtoMessage() {}

func (x *DeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReq.ProtoReflect.Descriptor instead.
func (*DeleteReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DNSCanary - Single canary and metadata
type DNSCanary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImplantName    string `protobuf:"bytes,1,opt,name=ImplantName,proto3" json:"ImplantName,omitempty"`
	Domain         string `protobuf:"bytes,2,opt,name=Domain,proto3" json:"Domain,omitempty"`
	Triggered      bool   `protobuf:"varint,3,opt,name=Triggered,proto3" json:"Triggered,omitempty"`
	FirstTriggered string `protobuf:"bytes,4,opt,name=FirstTriggered,proto3" json:"FirstTriggered,omitempty"`
	LatestTrigger  string `protobuf:"bytes,5,opt,name=LatestTrigger,proto3" json:"LatestTrigger,omitempty"`
	Count          uint32 `protobuf:"varint,6,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (x *DNSCanary) Reset() {
	*x = DNSCanary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSCanary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSCanary) ProtoMessage() {}

func (x *DNSCanary) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSCanary.ProtoReflect.Descriptor instead.
func (*DNSCanary) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{24}
}

func (x *DNSCanary) GetImplantName() string {
	if x != nil {
		return x.ImplantName
	}
	return ""
}

func (x *DNSCanary) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DNSCanary) GetTriggered() bool {
	if x != nil {
		return x.Triggered
	}
	return false
}

func (x *DNSCanary) GetFirstTriggered() string {
	if x != nil {
		return x.FirstTriggered
	}
	return ""
}

func (x *DNSCanary) GetLatestTrigger() string {
	if x != nil {
		return x.LatestTrigger
	}
	return ""
}

func (x *DNSCanary) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Canaries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Canaries []*DNSCanary `protobuf:"bytes,1,rep,name=Canaries,proto3" json:"Canaries,omitempty"`
}

func (x *Canaries) Reset() {
	*x = Canaries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Canaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Canaries) ProtoMessage() {}

func (x *Canaries) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Canaries.ProtoReflect.Descriptor instead.
func (*Canaries) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{25}
}

func (x *Canaries) GetCanaries() []*DNSCanary {
	if x != nil {
		return x.Canaries
	}
	return nil
}

// UniqueWGIP - Unique wireguard IP
type UniqueWGIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IP string `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
}

func (x *UniqueWGIP) Reset() {
	*x = UniqueWGIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueWGIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueWGIP) ProtoMessage() {}

func (x *UniqueWGIP) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueWGIP.ProtoReflect.Descriptor instead.
func (*UniqueWGIP) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{26}
}

func (x *UniqueWGIP) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

type ImplantProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string         `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Config *ImplantConfig `protobuf:"bytes,2,opt,name=Config,proto3" json:"Config,omitempty"`
}

func (x *ImplantProfile) Reset() {
	*x = ImplantProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplantProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplantProfile) ProtoMessage() {}

func (x *ImplantProfile) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplantProfile.ProtoReflect.Descriptor instead.
func (*ImplantProfile) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{27}
}

func (x *ImplantProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImplantProfile) GetConfig() *ImplantConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type ImplantProfiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profiles []*ImplantProfile `protobuf:"bytes,1,rep,name=Profiles,proto3" json:"Profiles,omitempty"`
}

func (x *ImplantProfiles) Reset() {
	*x = ImplantProfiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplantProfiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplantProfiles) ProtoMessage() {}

func (x *ImplantProfiles) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplantProfiles.ProtoReflect.Descriptor instead.
func (*ImplantProfiles) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{28}
}

func (x *ImplantProfiles) GetProfiles() []*ImplantProfile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

type RegenerateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImplantName string `protobuf:"bytes,1,opt,name=ImplantName,proto3" json:"ImplantName,omitempty"`
}

func (x *RegenerateReq) Reset() {
	*x = RegenerateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegenerateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegenerateReq) ProtoMessage() {}

func (x *RegenerateReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegenerateReq.ProtoReflect.Descriptor instead.
func (*RegenerateReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{29}
}

func (x *RegenerateReq) GetImplantName() string {
	if x != nil {
		return x.ImplantName
	}
	return ""
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string              `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	SessionID       string              `protobuf:"bytes,2,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	SessionName     string              `protobuf:"bytes,3,opt,name=SessionName,proto3" json:"SessionName,omitempty"`
	SessionUsername string              `protobuf:"bytes,4,opt,name=SessionUsername,proto3" json:"SessionUsername,omitempty"`
	Name            string              `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
	Description     string              `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
	Order           int32               `protobuf:"varint,7,opt,name=Order,proto3" json:"Order,omitempty"`
	Profile         *sliverpb.Malleable `protobuf:"bytes,8,opt,name=Profile,proto3" json:"Profile,omitempty"`
	StageImplant    string              `protobuf:"bytes,9,opt,name=StageImplant,proto3" json:"StageImplant,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{30}
}

func (x *Job) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Job) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *Job) GetSessionName() string {
	if x != nil {
		return x.SessionName
	}
	return ""
}

func (x *Job) GetSessionUsername() string {
	if x != nil {
		return x.SessionUsername
	}
	return ""
}

func (x *Job) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Job) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *Job) GetProfile() *sliverpb.Malleable {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *Job) GetStageImplant() string {
	if x != nil {
		return x.StageImplant
	}
	return ""
}

// [ Jobs ]  ----------------------------------------
type Jobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active []*Job `protobuf:"bytes,1,rep,name=Active,proto3" json:"Active,omitempty"`
}

func (x *Jobs) Reset() {
	*x = Jobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jobs) ProtoMessage() {}

func (x *Jobs) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jobs.ProtoReflect.Descriptor instead.
func (*Jobs) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{31}
}

func (x *Jobs) GetActive() []*Job {
	if x != nil {
		return x.Active
	}
	return nil
}

type KillJobReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *KillJobReq) Reset() {
	*x = KillJobReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillJobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillJobReq) ProtoMessage() {}

func (x *KillJobReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillJobReq.ProtoReflect.Descriptor instead.
func (*KillJobReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{32}
}

func (x *KillJobReq) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type KillJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *KillJob) Reset() {
	*x = KillJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillJob) ProtoMessage() {}

func (x *KillJob) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillJob.ProtoReflect.Descriptor instead.
func (*KillJob) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{33}
}

func (x *KillJob) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *KillJob) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CreateMalleableReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *sliverpb.Malleable `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
	Request *commonpb.Request   `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *CreateMalleableReq) Reset() {
	*x = CreateMalleableReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMalleableReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMalleableReq) ProtoMessage() {}

func (x *CreateMalleableReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMalleableReq.ProtoReflect.Descriptor instead.
func (*CreateMalleableReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{34}
}

func (x *CreateMalleableReq) GetProfile() *sliverpb.Malleable {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *CreateMalleableReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type CreateMalleable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile  *sliverpb.Malleable `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
	Response *commonpb.Response  `protobuf:"bytes,9,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *CreateMalleable) Reset() {
	*x = CreateMalleable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMalleable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMalleable) ProtoMessage() {}

func (x *CreateMalleable) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMalleable.ProtoReflect.Descriptor instead.
func (*CreateMalleable) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{35}
}

func (x *CreateMalleable) GetProfile() *sliverpb.Malleable {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *CreateMalleable) GetResponse() *commonpb.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type DeleteMalleableReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *sliverpb.Malleable `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
	Request *commonpb.Request   `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *DeleteMalleableReq) Reset() {
	*x = DeleteMalleableReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMalleableReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMalleableReq) ProtoMessage() {}

func (x *DeleteMalleableReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMalleableReq.ProtoReflect.Descriptor instead.
func (*DeleteMalleableReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteMalleableReq) GetProfile() *sliverpb.Malleable {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *DeleteMalleableReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type DeleteMalleable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *commonpb.Response `protobuf:"bytes,9,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *DeleteMalleable) Reset() {
	*x = DeleteMalleable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMalleable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMalleable) ProtoMessage() {}

func (x *DeleteMalleable) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMalleable.ProtoReflect.Descriptor instead.
func (*DeleteMalleable) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{37}
}

func (x *DeleteMalleable) GetResponse() *commonpb.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type UpdateMalleableReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *sliverpb.Malleable `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
	Request *commonpb.Request   `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *UpdateMalleableReq) Reset() {
	*x = UpdateMalleableReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMalleableReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMalleableReq) ProtoMessage() {}

func (x *UpdateMalleableReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMalleableReq.ProtoReflect.Descriptor instead.
func (*UpdateMalleableReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateMalleableReq) GetProfile() *sliverpb.Malleable {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *UpdateMalleableReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type UpdateMalleable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updated  *sliverpb.Malleable `protobuf:"bytes,1,opt,name=Updated,proto3" json:"Updated,omitempty"`
	Response *commonpb.Response  `protobuf:"bytes,9,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *UpdateMalleable) Reset() {
	*x = UpdateMalleable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMalleable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMalleable) ProtoMessage() {}

func (x *UpdateMalleable) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMalleable.ProtoReflect.Descriptor instead.
func (*UpdateMalleable) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateMalleable) GetUpdated() *sliverpb.Malleable {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *UpdateMalleable) GetResponse() *commonpb.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type GetMalleablesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *commonpb.Request `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *GetMalleablesReq) Reset() {
	*x = GetMalleablesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMalleablesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMalleablesReq) ProtoMessage() {}

func (x *GetMalleablesReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMalleablesReq.ProtoReflect.Descriptor instead.
func (*GetMalleablesReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{40}
}

func (x *GetMalleablesReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type GetMalleables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profiles []*sliverpb.Malleable `protobuf:"bytes,1,rep,name=Profiles,proto3" json:"Profiles,omitempty"`
}

func (x *GetMalleables) Reset() {
	*x = GetMalleables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMalleables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMalleables) ProtoMessage() {}

func (x *GetMalleables) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMalleables.ProtoReflect.Descriptor instead.
func (*GetMalleables) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{41}
}

func (x *GetMalleables) GetProfiles() []*sliverpb.Malleable {
	if x != nil {
		return x.Profiles
	}
	return nil
}

// The server requests an implant/the server to start a handler.
type HandlerStageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *sliverpb.Malleable `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
	Request *commonpb.Request   `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *HandlerStageReq) Reset() {
	*x = HandlerStageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandlerStageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandlerStageReq) ProtoMessage() {}

func (x *HandlerStageReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandlerStageReq.ProtoReflect.Descriptor instead.
func (*HandlerStageReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{42}
}

func (x *HandlerStageReq) GetProfile() *sliverpb.Malleable {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *HandlerStageReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type HandlerStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool               `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Response *commonpb.Response `protobuf:"bytes,9,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *HandlerStage) Reset() {
	*x = HandlerStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandlerStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandlerStage) ProtoMessage() {}

func (x *HandlerStage) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandlerStage.ProtoReflect.Descriptor instead.
func (*HandlerStage) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{43}
}

func (x *HandlerStage) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *HandlerStage) GetResponse() *commonpb.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type HandlerStagerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol     StagerProtocol      `protobuf:"varint,1,opt,name=Protocol,proto3,enum=clientpb.StagerProtocol" json:"Protocol,omitempty"`
	StageImplant string              `protobuf:"bytes,2,opt,name=StageImplant,proto3" json:"StageImplant,omitempty"`
	StageBytes   []byte              `protobuf:"bytes,3,opt,name=StageBytes,proto3" json:"StageBytes,omitempty"`
	Profile      *sliverpb.Malleable `protobuf:"bytes,5,opt,name=Profile,proto3" json:"Profile,omitempty"`
	Request      *commonpb.Request   `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *HandlerStagerReq) Reset() {
	*x = HandlerStagerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandlerStagerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandlerStagerReq) ProtoMessage() {}

func (x *HandlerStagerReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandlerStagerReq.ProtoReflect.Descriptor instead.
func (*HandlerStagerReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{44}
}

func (x *HandlerStagerReq) GetProtocol() StagerProtocol {
	if x != nil {
		return x.Protocol
	}
	return StagerProtocol_TCP
}

func (x *HandlerStagerReq) GetStageImplant() string {
	if x != nil {
		return x.StageImplant
	}
	return ""
}

func (x *HandlerStagerReq) GetStageBytes() []byte {
	if x != nil {
		return x.StageBytes
	}
	return nil
}

func (x *HandlerStagerReq) GetProfile() *sliverpb.Malleable {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *HandlerStagerReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type HandlerStager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool               `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Response *commonpb.Response `protobuf:"bytes,9,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *HandlerStager) Reset() {
	*x = HandlerStager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandlerStager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandlerStager) ProtoMessage() {}

func (x *HandlerStager) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandlerStager.ProtoReflect.Descriptor instead.
func (*HandlerStager) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{45}
}

func (x *HandlerStager) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *HandlerStager) GetResponse() *commonpb.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

// The server requests an implant/the server to stop a handler.
type HandlerCloseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *sliverpb.Malleable `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
	Request *commonpb.Request   `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *HandlerCloseReq) Reset() {
	*x = HandlerCloseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandlerCloseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandlerCloseReq) ProtoMessage() {}

func (x *HandlerCloseReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandlerCloseReq.ProtoReflect.Descriptor instead.
func (*HandlerCloseReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{46}
}

func (x *HandlerCloseReq) GetProfile() *sliverpb.Malleable {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *HandlerCloseReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type HandlerClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool               `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Response *commonpb.Response `protobuf:"bytes,9,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *HandlerClose) Reset() {
	*x = HandlerClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandlerClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandlerClose) ProtoMessage() {}

func (x *HandlerClose) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandlerClose.ProtoReflect.Descriptor instead.
func (*HandlerClose) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{47}
}

func (x *HandlerClose) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *HandlerClose) GetResponse() *commonpb.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type Sessions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions []*Session `protobuf:"bytes,1,rep,name=Sessions,proto3" json:"Sessions,omitempty"`
}

func (x *Sessions) Reset() {
	*x = Sessions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sessions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sessions) ProtoMessage() {}

func (x *Sessions) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sessions.ProtoReflect.Descriptor instead.
func (*Sessions) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{48}
}

func (x *Sessions) GetSessions() []*Session {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type UpdateSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID         uint32   `protobuf:"varint,1,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	Name              string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	ReconnectInterval int64    `protobuf:"varint,3,opt,name=ReconnectInterval,proto3" json:"ReconnectInterval,omitempty"`
	PollInterval      int64    `protobuf:"varint,4,opt,name=PollInterval,proto3" json:"PollInterval,omitempty"`
	Extensions        []string `protobuf:"bytes,5,rep,name=Extensions,proto3" json:"Extensions,omitempty"`
}

func (x *UpdateSession) Reset() {
	*x = UpdateSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSession) ProtoMessage() {}

func (x *UpdateSession) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSession.ProtoReflect.Descriptor instead.
func (*UpdateSession) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{49}
}

func (x *UpdateSession) GetSessionID() uint32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *UpdateSession) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSession) GetReconnectInterval() int64 {
	if x != nil {
		return x.ReconnectInterval
	}
	return 0
}

func (x *UpdateSession) GetPollInterval() int64 {
	if x != nil {
		return x.PollInterval
	}
	return 0
}

func (x *UpdateSession) GetExtensions() []string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

type GenerateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config  *ImplantConfig    `protobuf:"bytes,1,opt,name=Config,proto3" json:"Config,omitempty"`
	Request *commonpb.Request `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *GenerateReq) Reset() {
	*x = GenerateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateReq) ProtoMessage() {}

func (x *GenerateReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateReq.ProtoReflect.Descriptor instead.
func (*GenerateReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{50}
}

func (x *GenerateReq) GetConfig() *ImplantConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *GenerateReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type Generate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File *commonpb.File `protobuf:"bytes,1,opt,name=File,proto3" json:"File,omitempty"`
}

func (x *Generate) Reset() {
	*x = Generate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Generate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Generate) ProtoMessage() {}

func (x *Generate) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Generate.ProtoReflect.Descriptor instead.
func (*Generate) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{51}
}

func (x *Generate) GetFile() *commonpb.File {
	if x != nil {
		return x.File
	}
	return nil
}

type MSFReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload    string            `protobuf:"bytes,1,opt,name=Payload,proto3" json:"Payload,omitempty"`
	LHost      string            `protobuf:"bytes,2,opt,name=LHost,proto3" json:"LHost,omitempty"`
	LPort      uint32            `protobuf:"varint,3,opt,name=LPort,proto3" json:"LPort,omitempty"`
	Encoder    string            `protobuf:"bytes,4,opt,name=Encoder,proto3" json:"Encoder,omitempty"`
	Iterations int32             `protobuf:"varint,5,opt,name=Iterations,proto3" json:"Iterations,omitempty"`
	Request    *commonpb.Request `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *MSFReq) Reset() {
	*x = MSFReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSFReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSFReq) ProtoMessage() {}

func (x *MSFReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSFReq.ProtoReflect.Descriptor instead.
func (*MSFReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{52}
}

func (x *MSFReq) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *MSFReq) GetLHost() string {
	if x != nil {
		return x.LHost
	}
	return ""
}

func (x *MSFReq) GetLPort() uint32 {
	if x != nil {
		return x.LPort
	}
	return 0
}

func (x *MSFReq) GetEncoder() string {
	if x != nil {
		return x.Encoder
	}
	return ""
}

func (x *MSFReq) GetIterations() int32 {
	if x != nil {
		return x.Iterations
	}
	return 0
}

func (x *MSFReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type MSFRemoteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload    string            `protobuf:"bytes,1,opt,name=Payload,proto3" json:"Payload,omitempty"`
	LHost      string            `protobuf:"bytes,2,opt,name=LHost,proto3" json:"LHost,omitempty"`
	LPort      uint32            `protobuf:"varint,3,opt,name=LPort,proto3" json:"LPort,omitempty"`
	Encoder    string            `protobuf:"bytes,4,opt,name=Encoder,proto3" json:"Encoder,omitempty"`
	Iterations int32             `protobuf:"varint,5,opt,name=Iterations,proto3" json:"Iterations,omitempty"`
	PID        uint32            `protobuf:"varint,8,opt,name=PID,proto3" json:"PID,omitempty"`
	Request    *commonpb.Request `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *MSFRemoteReq) Reset() {
	*x = MSFRemoteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSFRemoteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSFRemoteReq) ProtoMessage() {}

func (x *MSFRemoteReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSFRemoteReq.ProtoReflect.Descriptor instead.
func (*MSFRemoteReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{53}
}

func (x *MSFRemoteReq) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *MSFRemoteReq) GetLHost() string {
	if x != nil {
		return x.LHost
	}
	return ""
}

func (x *MSFRemoteReq) GetLPort() uint32 {
	if x != nil {
		return x.LPort
	}
	return 0
}

func (x *MSFRemoteReq) GetEncoder() string {
	if x != nil {
		return x.Encoder
	}
	return ""
}

func (x *MSFRemoteReq) GetIterations() int32 {
	if x != nil {
		return x.Iterations
	}
	return 0
}

func (x *MSFRemoteReq) GetPID() uint32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *MSFRemoteReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type ShellcodeRDIReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data         []byte            `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	FunctionName string            `protobuf:"bytes,2,opt,name=FunctionName,proto3" json:"FunctionName,omitempty"`
	Arguments    string            `protobuf:"bytes,3,opt,name=Arguments,proto3" json:"Arguments,omitempty"`
	Request      *commonpb.Request `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *ShellcodeRDIReq) Reset() {
	*x = ShellcodeRDIReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShellcodeRDIReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellcodeRDIReq) ProtoMessage() {}

func (x *ShellcodeRDIReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellcodeRDIReq.ProtoReflect.Descriptor instead.
func (*ShellcodeRDIReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{54}
}

func (x *ShellcodeRDIReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ShellcodeRDIReq) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *ShellcodeRDIReq) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

func (x *ShellcodeRDIReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type ShellcodeRDI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ShellcodeRDI) Reset() {
	*x = ShellcodeRDI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShellcodeRDI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellcodeRDI) ProtoMessage() {}

func (x *ShellcodeRDI) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellcodeRDI.ProtoReflect.Descriptor instead.
func (*ShellcodeRDI) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{55}
}

func (x *ShellcodeRDI) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type MsfStagerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arch     string            `protobuf:"bytes,1,opt,name=Arch,proto3" json:"Arch,omitempty"`
	Format   string            `protobuf:"bytes,2,opt,name=Format,proto3" json:"Format,omitempty"`
	Port     uint32            `protobuf:"varint,3,opt,name=Port,proto3" json:"Port,omitempty"`
	Host     string            `protobuf:"bytes,4,opt,name=Host,proto3" json:"Host,omitempty"`
	OS       string            `protobuf:"bytes,5,opt,name=OS,proto3" json:"OS,omitempty"` // reserved for future usage
	Protocol StagerProtocol    `protobuf:"varint,6,opt,name=Protocol,proto3,enum=clientpb.StagerProtocol" json:"Protocol,omitempty"`
	BadChars []string          `protobuf:"bytes,7,rep,name=BadChars,proto3" json:"BadChars,omitempty"`
	Request  *commonpb.Request `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *MsfStagerReq) Reset() {
	*x = MsfStagerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsfStagerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsfStagerReq) ProtoMessage() {}

func (x *MsfStagerReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsfStagerReq.ProtoReflect.Descriptor instead.
func (*MsfStagerReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{56}
}

func (x *MsfStagerReq) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *MsfStagerReq) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *MsfStagerReq) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MsfStagerReq) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MsfStagerReq) GetOS() string {
	if x != nil {
		return x.OS
	}
	return ""
}

func (x *MsfStagerReq) GetProtocol() StagerProtocol {
	if x != nil {
		return x.Protocol
	}
	return StagerProtocol_TCP
}

func (x *MsfStagerReq) GetBadChars() []string {
	if x != nil {
		return x.BadChars
	}
	return nil
}

func (x *MsfStagerReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type MsfStager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File    *commonpb.File    `protobuf:"bytes,1,opt,name=File,proto3" json:"File,omitempty"`
	Request *commonpb.Request `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *MsfStager) Reset() {
	*x = MsfStager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsfStager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsfStager) ProtoMessage() {}

func (x *MsfStager) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsfStager.ProtoReflect.Descriptor instead.
func (*MsfStager) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{57}
}

func (x *MsfStager) GetFile() *commonpb.File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *MsfStager) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

// GetSystemReq - Client request to the server which is translated into
//                InvokeSystemReq when sending to the implant.
type GetSystemReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostingProcess string            `protobuf:"bytes,1,opt,name=HostingProcess,proto3" json:"HostingProcess,omitempty"`
	Config         *ImplantConfig    `protobuf:"bytes,2,opt,name=Config,proto3" json:"Config,omitempty"`
	Request        *commonpb.Request `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *GetSystemReq) Reset() {
	*x = GetSystemReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSystemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemReq) ProtoMessage() {}

func (x *GetSystemReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemReq.ProtoReflect.Descriptor instead.
func (*GetSystemReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{58}
}

func (x *GetSystemReq) GetHostingProcess() string {
	if x != nil {
		return x.HostingProcess
	}
	return ""
}

func (x *GetSystemReq) GetConfig() *ImplantConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *GetSystemReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

// MigrateReq - Client request to the server which is translated into
//              InvokeMigrateReq when sending to the implant.
type MigrateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid     uint32            `protobuf:"varint,1,opt,name=Pid,proto3" json:"Pid,omitempty"`
	Config  *ImplantConfig    `protobuf:"bytes,2,opt,name=Config,proto3" json:"Config,omitempty"`
	Request *commonpb.Request `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *MigrateReq) Reset() {
	*x = MigrateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateReq) ProtoMessage() {}

func (x *MigrateReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateReq.ProtoReflect.Descriptor instead.
func (*MigrateReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{59}
}

func (x *MigrateReq) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *MigrateReq) GetConfig() *ImplantConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MigrateReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

// [ Tunnels ] ----------------------------------------
type CreateTunnelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *commonpb.Request `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *CreateTunnelReq) Reset() {
	*x = CreateTunnelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTunnelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTunnelReq) ProtoMessage() {}

func (x *CreateTunnelReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTunnelReq.ProtoReflect.Descriptor instead.
func (*CreateTunnelReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{60}
}

func (x *CreateTunnelReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type CreateTunnel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID uint32 `protobuf:"varint,1,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	TunnelID  uint64 `protobuf:"varint,8,opt,name=TunnelID,proto3" json:"TunnelID,omitempty"`
}

func (x *CreateTunnel) Reset() {
	*x = CreateTunnel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTunnel) ProtoMessage() {}

func (x *CreateTunnel) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTunnel.ProtoReflect.Descriptor instead.
func (*CreateTunnel) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{61}
}

func (x *CreateTunnel) GetSessionID() uint32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CreateTunnel) GetTunnelID() uint64 {
	if x != nil {
		return x.TunnelID
	}
	return 0
}

type CloseTunnelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TunnelID uint64            `protobuf:"varint,8,opt,name=TunnelID,proto3" json:"TunnelID,omitempty"`
	Request  *commonpb.Request `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *CloseTunnelReq) Reset() {
	*x = CloseTunnelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseTunnelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseTunnelReq) ProtoMessage() {}

func (x *CloseTunnelReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseTunnelReq.ProtoReflect.Descriptor instead.
func (*CloseTunnelReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{62}
}

func (x *CloseTunnelReq) GetTunnelID() uint64 {
	if x != nil {
		return x.TunnelID
	}
	return 0
}

func (x *CloseTunnelReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

// [ Events ] ----------------------------------------
type Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string    `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name     string    `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Operator *Operator `protobuf:"bytes,3,opt,name=Operator,proto3" json:"Operator,omitempty"`
}

func (x *Client) Reset() {
	*x = Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client) ProtoMessage() {}

func (x *Client) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client.ProtoReflect.Descriptor instead.
func (*Client) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{63}
}

func (x *Client) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Client) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Client) GetOperator() *Operator {
	if x != nil {
		return x.Operator
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      EventType `protobuf:"varint,1,opt,name=Type,proto3,enum=clientpb.EventType" json:"Type,omitempty"`
	Name      string    `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Component string    `protobuf:"bytes,3,opt,name=Component,proto3" json:"Component,omitempty"`
	Level     Level     `protobuf:"varint,4,opt,name=Level,proto3,enum=clientpb.Level" json:"Level,omitempty"`
	Data      []byte    `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`
	Err       string    `protobuf:"bytes,6,opt,name=Err,proto3" json:"Err,omitempty"` // Can't trigger normal gRPC error
	Client    *Client   `protobuf:"bytes,10,opt,name=Client,proto3" json:"Client,omitempty"`
	Job       *Job      `protobuf:"bytes,12,opt,name=Job,proto3" json:"Job,omitempty"`
	Session   *Session  `protobuf:"bytes,13,opt,name=Session,proto3" json:"Session,omitempty"`
	Beacon    *Beacon   `protobuf:"bytes,14,opt,name=Beacon,proto3" json:"Beacon,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{64}
}

func (x *Event) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_Log
}

func (x *Event) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Event) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *Event) GetLevel() Level {
	if x != nil {
		return x.Level
	}
	return Level_TRACE
}

func (x *Event) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Event) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *Event) GetClient() *Client {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *Event) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *Event) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *Event) GetBeacon() *Beacon {
	if x != nil {
		return x.Beacon
	}
	return nil
}

type Operators struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operators []*Operator `protobuf:"bytes,1,rep,name=Operators,proto3" json:"Operators,omitempty"`
}

func (x *Operators) Reset() {
	*x = Operators{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operators) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operators) ProtoMessage() {}

func (x *Operators) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operators.ProtoReflect.Descriptor instead.
func (*Operators) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{65}
}

func (x *Operators) GetOperators() []*Operator {
	if x != nil {
		return x.Operators
	}
	return nil
}

type Operator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Online bool   `protobuf:"varint,1,opt,name=Online,proto3" json:"Online,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *Operator) Reset() {
	*x = Operator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator) ProtoMessage() {}

func (x *Operator) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator.ProtoReflect.Descriptor instead.
func (*Operator) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{66}
}

func (x *Operator) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *Operator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// [ Websites ] ----------------------------------------
type WebContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path        string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	ContentType string `protobuf:"bytes,2,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	Size        uint64 `protobuf:"varint,3,opt,name=Size,proto3" json:"Size,omitempty"`
	Content     []byte `protobuf:"bytes,9,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *WebContent) Reset() {
	*x = WebContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebContent) ProtoMessage() {}

func (x *WebContent) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebContent.ProtoReflect.Descriptor instead.
func (*WebContent) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{67}
}

func (x *WebContent) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *WebContent) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *WebContent) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *WebContent) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type WebsiteAddContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Contents map[string]*WebContent `protobuf:"bytes,2,rep,name=Contents,proto3" json:"Contents,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WebsiteAddContent) Reset() {
	*x = WebsiteAddContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsiteAddContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsiteAddContent) ProtoMessage() {}

func (x *WebsiteAddContent) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsiteAddContent.ProtoReflect.Descriptor instead.
func (*WebsiteAddContent) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{68}
}

func (x *WebsiteAddContent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WebsiteAddContent) GetContents() map[string]*WebContent {
	if x != nil {
		return x.Contents
	}
	return nil
}

type WebsiteRemoveContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Paths []string `protobuf:"bytes,2,rep,name=Paths,proto3" json:"Paths,omitempty"`
}

func (x *WebsiteRemoveContent) Reset() {
	*x = WebsiteRemoveContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsiteRemoveContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsiteRemoveContent) ProtoMessage() {}

func (x *WebsiteRemoveContent) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsiteRemoveContent.ProtoReflect.Descriptor instead.
func (*WebsiteRemoveContent) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{69}
}

func (x *WebsiteRemoveContent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WebsiteRemoveContent) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

type Website struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Contents map[string]*WebContent `protobuf:"bytes,2,rep,name=Contents,proto3" json:"Contents,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Website) Reset() {
	*x = Website{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Website) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Website) ProtoMessage() {}

func (x *Website) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Website.ProtoReflect.Descriptor instead.
func (*Website) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{70}
}

func (x *Website) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Website) GetContents() map[string]*WebContent {
	if x != nil {
		return x.Contents
	}
	return nil
}

type Websites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Websites []*Website `protobuf:"bytes,1,rep,name=Websites,proto3" json:"Websites,omitempty"`
}

func (x *Websites) Reset() {
	*x = Websites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Websites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Websites) ProtoMessage() {}

func (x *Websites) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Websites.ProtoReflect.Descriptor instead.
func (*Websites) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{71}
}

func (x *Websites) GetWebsites() []*Website {
	if x != nil {
		return x.Websites
	}
	return nil
}

type WGClientConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerPubKey     string `protobuf:"bytes,1,opt,name=ServerPubKey,proto3" json:"ServerPubKey,omitempty"`
	ClientPrivateKey string `protobuf:"bytes,2,opt,name=ClientPrivateKey,proto3" json:"ClientPrivateKey,omitempty"`
	ClientPubKey     string `protobuf:"bytes,3,opt,name=ClientPubKey,proto3" json:"ClientPubKey,omitempty"`
	ClientIP         string `protobuf:"bytes,4,opt,name=ClientIP,proto3" json:"ClientIP,omitempty"`
}

func (x *WGClientConfig) Reset() {
	*x = WGClientConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WGClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WGClientConfig) ProtoMessage() {}

func (x *WGClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WGClientConfig.ProtoReflect.Descriptor instead.
func (*WGClientConfig) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{72}
}

func (x *WGClientConfig) GetServerPubKey() string {
	if x != nil {
		return x.ServerPubKey
	}
	return ""
}

func (x *WGClientConfig) GetClientPrivateKey() string {
	if x != nil {
		return x.ClientPrivateKey
	}
	return ""
}

func (x *WGClientConfig) GetClientPubKey() string {
	if x != nil {
		return x.ClientPubKey
	}
	return ""
}

func (x *WGClientConfig) GetClientIP() string {
	if x != nil {
		return x.ClientIP
	}
	return ""
}

type Credential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// USER_PASSWORD
	User     string `protobuf:"bytes,2,opt,name=User,proto3" json:"User,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	// API_KEY
	APIKey string `protobuf:"bytes,4,opt,name=APIKey,proto3" json:"APIKey,omitempty"`
}

func (x *Credential) Reset() {
	*x = Credential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential) ProtoMessage() {}

func (x *Credential) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential.ProtoReflect.Descriptor instead.
func (*Credential) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{73}
}

func (x *Credential) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Credential) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Credential) GetAPIKey() string {
	if x != nil {
		return x.APIKey
	}
	return ""
}

type Loot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           LootType       `protobuf:"varint,1,opt,name=Type,proto3,enum=clientpb.LootType" json:"Type,omitempty"`
	LootID         string         `protobuf:"bytes,2,opt,name=LootID,proto3" json:"LootID,omitempty"`
	Name           string         `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	CredentialType CredentialType `protobuf:"varint,4,opt,name=CredentialType,proto3,enum=clientpb.CredentialType" json:"CredentialType,omitempty"`
	Credential     *Credential    `protobuf:"bytes,5,opt,name=Credential,proto3" json:"Credential,omitempty"`
	FileType       FileType       `protobuf:"varint,6,opt,name=FileType,proto3,enum=clientpb.FileType" json:"FileType,omitempty"`
	File           *commonpb.File `protobuf:"bytes,9,opt,name=File,proto3" json:"File,omitempty"`
}

func (x *Loot) Reset() {
	*x = Loot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Loot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Loot) ProtoMessage() {}

func (x *Loot) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Loot.ProtoReflect.Descriptor instead.
func (*Loot) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{74}
}

func (x *Loot) GetType() LootType {
	if x != nil {
		return x.Type
	}
	return LootType_LOOT_FILE
}

func (x *Loot) GetLootID() string {
	if x != nil {
		return x.LootID
	}
	return ""
}

func (x *Loot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Loot) GetCredentialType() CredentialType {
	if x != nil {
		return x.CredentialType
	}
	return CredentialType_NO_CREDENTIAL
}

func (x *Loot) GetCredential() *Credential {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *Loot) GetFileType() FileType {
	if x != nil {
		return x.FileType
	}
	return FileType_NO_FILE
}

func (x *Loot) GetFile() *commonpb.File {
	if x != nil {
		return x.File
	}
	return nil
}

type AllLoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Loot []*Loot `protobuf:"bytes,1,rep,name=Loot,proto3" json:"Loot,omitempty"`
}

func (x *AllLoot) Reset() {
	*x = AllLoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllLoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllLoot) ProtoMessage() {}

func (x *AllLoot) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllLoot.ProtoReflect.Descriptor instead.
func (*AllLoot) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{75}
}

func (x *AllLoot) GetLoot() []*Loot {
	if x != nil {
		return x.Loot
	}
	return nil
}

// [ Hosts ] ----------------------------------------
type IOC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path     string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	FileHash string `protobuf:"bytes,2,opt,name=FileHash,proto3" json:"FileHash,omitempty"`
	ID       string `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *IOC) Reset() {
	*x = IOC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IOC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IOC) ProtoMessage() {}

func (x *IOC) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IOC.ProtoReflect.Descriptor instead.
func (*IOC) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{76}
}

func (x *IOC) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *IOC) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *IOC) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExtensionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output string `protobuf:"bytes,1,opt,name=Output,proto3" json:"Output,omitempty"`
}

func (x *ExtensionData) Reset() {
	*x = ExtensionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionData) ProtoMessage() {}

func (x *ExtensionData) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionData.ProtoReflect.Descriptor instead.
func (*ExtensionData) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{77}
}

func (x *ExtensionData) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

type Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname      string                    `protobuf:"bytes,1,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	HostUUID      string                    `protobuf:"bytes,2,opt,name=HostUUID,proto3" json:"HostUUID,omitempty"`
	OSVersion     string                    `protobuf:"bytes,3,opt,name=OSVersion,proto3" json:"OSVersion,omitempty"`
	IOCs          []*IOC                    `protobuf:"bytes,4,rep,name=IOCs,proto3" json:"IOCs,omitempty"`
	ExtensionData map[string]*ExtensionData `protobuf:"bytes,5,rep,name=ExtensionData,proto3" json:"ExtensionData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Host) Reset() {
	*x = Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Host) ProtoMessage() {}

func (x *Host) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Host.ProtoReflect.Descriptor instead.
func (*Host) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{78}
}

func (x *Host) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Host) GetHostUUID() string {
	if x != nil {
		return x.HostUUID
	}
	return ""
}

func (x *Host) GetOSVersion() string {
	if x != nil {
		return x.OSVersion
	}
	return ""
}

func (x *Host) GetIOCs() []*IOC {
	if x != nil {
		return x.IOCs
	}
	return nil
}

func (x *Host) GetExtensionData() map[string]*ExtensionData {
	if x != nil {
		return x.ExtensionData
	}
	return nil
}

type AllHosts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hosts []*Host `protobuf:"bytes,1,rep,name=Hosts,proto3" json:"Hosts,omitempty"`
}

func (x *AllHosts) Reset() {
	*x = AllHosts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllHosts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllHosts) ProtoMessage() {}

func (x *AllHosts) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllHosts.ProtoReflect.Descriptor instead.
func (*AllHosts) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{79}
}

func (x *AllHosts) GetHosts() []*Host {
	if x != nil {
		return x.Hosts
	}
	return nil
}

// [ Dll Hijack ] ----------------------------------------
type DllHijackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferenceDLLPath string            `protobuf:"bytes,1,opt,name=ReferenceDLLPath,proto3" json:"ReferenceDLLPath,omitempty"`
	TargetLocation   string            `protobuf:"bytes,2,opt,name=TargetLocation,proto3" json:"TargetLocation,omitempty"`
	ReferenceDLL     []byte            `protobuf:"bytes,3,opt,name=ReferenceDLL,proto3" json:"ReferenceDLL,omitempty"`
	TargetDLL        []byte            `protobuf:"bytes,4,opt,name=TargetDLL,proto3" json:"TargetDLL,omitempty"`
	ProfileName      string            `protobuf:"bytes,5,opt,name=ProfileName,proto3" json:"ProfileName,omitempty"`
	Request          *commonpb.Request `protobuf:"bytes,9,opt,name=Request,proto3" json:"Request,omitempty"`
}

func (x *DllHijackReq) Reset() {
	*x = DllHijackReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DllHijackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DllHijackReq) ProtoMessage() {}

func (x *DllHijackReq) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DllHijackReq.ProtoReflect.Descriptor instead.
func (*DllHijackReq) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{80}
}

func (x *DllHijackReq) GetReferenceDLLPath() string {
	if x != nil {
		return x.ReferenceDLLPath
	}
	return ""
}

func (x *DllHijackReq) GetTargetLocation() string {
	if x != nil {
		return x.TargetLocation
	}
	return ""
}

func (x *DllHijackReq) GetReferenceDLL() []byte {
	if x != nil {
		return x.ReferenceDLL
	}
	return nil
}

func (x *DllHijackReq) GetTargetDLL() []byte {
	if x != nil {
		return x.TargetDLL
	}
	return nil
}

func (x *DllHijackReq) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *DllHijackReq) GetRequest() *commonpb.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type DllHijack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *commonpb.Response `protobuf:"bytes,9,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *DllHijack) Reset() {
	*x = DllHijack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientpb_client_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DllHijack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DllHijack) ProtoMessage() {}

func (x *DllHijack) ProtoReflect() protoreflect.Message {
	mi := &file_clientpb_client_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DllHijack.ProtoReflect.Descriptor instead.
func (*DllHijack) Descriptor() ([]byte, []int) {
	return file_clientpb_client_proto_rawDescGZIP(), []int{81}
}

func (x *DllHijack) GetResponse() *commonpb.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

var File_clientpb_client_proto protoreflect.FileDescriptor

var file_clientpb_client_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x73, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x70, 0x62, 0x2f, 0x73, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xbd, 0x01, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x4d,
	0x61, 0x6a, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x61, 0x6a, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x69, 0x72, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x44, 0x69, 0x72, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x4f,
	0x53, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x4f, 0x53, 0x12, 0x12, 0x0a, 0x04, 0x41,
	0x72, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x72, 0x63, 0x68, 0x22,
	0xae, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x43, 0x6d, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x07,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x70, 0x62, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x06, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x85, 0x01, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x43, 0x6d, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x0e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x41,
	0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x2b, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x06, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x42, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x52, 0x06, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb9, 0x01, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x48,
	0x69, 0x73, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x53, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x48, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x53, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x5e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x76, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x0a, 0x14, 0x53,
	0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x11, 0x53, 0x61, 0x76, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x5f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x60, 0x0a, 0x15, 0x53, 0x61, 0x76, 0x65, 0x53, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x12, 0x53, 0x61, 0x76, 0x65, 0x53, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf7, 0x05, 0x0a, 0x07,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x08, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x55, 0x55, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x55, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x49, 0x44, 0x12, 0x10,
	0x0a, 0x03, 0x47, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x47, 0x49, 0x44,
	0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x53, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x4f, 0x53,
	0x12, 0x12, 0x0a, 0x04, 0x41, 0x72, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x41, 0x72, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x49, 0x44, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4c, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x43, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x43, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x76, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x45, 0x76, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x52, 0x65, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x52, 0x4c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x52, 0x4c, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6f, 0x6c,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x50, 0x6f, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x42,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x42, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x57,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0xe4, 0x06, 0x0a, 0x06, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x1d, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0xc8, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x49,
	0x44, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x47, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x53, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x4f, 0x53, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x72, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x41, 0x72, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x50,
	0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x76, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x45, 0x76, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x57, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2c,
	0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x6f, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x50, 0x6f, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x52, 0x4c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x42, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x42, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4e, 0x65, 0x78,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x35, 0x0a, 0x07,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x70, 0x62, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x07, 0x42, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x0a, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x0b, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x2a, 0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0xf8, 0x06, 0x0a, 0x0d,
	0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x47, 0x4f, 0x4f, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x47, 0x4f, 0x4f,
	0x53, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x4f, 0x41, 0x52, 0x43, 0x48, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x47, 0x4f, 0x41, 0x52, 0x43, 0x48, 0x12, 0x2e, 0x0a, 0x06, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x70, 0x62, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x49, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x49, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x49, 0x73, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x76, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x45, 0x76, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x4f,
	0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x4f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x65,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x61, 0x72,
	0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4a, 0x6f, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x03, 0x43, 0x32, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e,
	0x4d, 0x61, 0x6c, 0x6c, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x03, 0x43, 0x32, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x32, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x32, 0x73, 0x12, 0x2e,
	0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x65, 0x72, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6d, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f,
	0x6d, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x12, 0x34, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x53, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6c, 0x0a,
	0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x47, 0x4f, 0x4f, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x47,
	0x4f, 0x4f, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x4f, 0x41, 0x52, 0x43, 0x48, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x4f, 0x41, 0x52, 0x43, 0x48, 0x12, 0x2e, 0x0a, 0x06, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x0d,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x4f, 0x4f, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x4f, 0x4f, 0x53, 0x12, 0x22, 0x0a,
	0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x4f, 0x41, 0x52, 0x43, 0x48, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x4f, 0x41, 0x52, 0x43,
	0x48, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x43, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x43, 0x43, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x58, 0x58,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x58, 0x58, 0x50,
	0x61, 0x74, 0x68, 0x22, 0xf5, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x47, 0x4f, 0x4f, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x47, 0x4f, 0x4f, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x4f, 0x41, 0x52, 0x43, 0x48, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x4f, 0x41, 0x52, 0x43, 0x48, 0x12, 0x32, 0x0a, 0x07,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x07, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x12, 0x3f, 0x0a, 0x0e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x72, 0x52, 0x0e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72,
	0x73, 0x12, 0x48, 0x0a, 0x12, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x12, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0x1f, 0x0a, 0x09, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc7, 0x01, 0x0a,
	0x09, 0x44, 0x4e, 0x53, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6d,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3b, 0x0a, 0x08, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e,
	0x44, 0x4e, 0x53, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x08, 0x43, 0x61, 0x6e, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x1c, 0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x57, 0x47, 0x49,
	0x50, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x50, 0x22, 0x55, 0x0a, 0x0e, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x47, 0x0a, 0x0f, 0x49, 0x6d, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x22, 0x31, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9e, 0x02, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x2d, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4d,
	0x61, 0x6c, 0x6c, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6d,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x22, 0x2d, 0x0a, 0x04, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x25, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x22, 0x1c, 0x0a, 0x0a, 0x4b, 0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x22, 0x33, 0x0a, 0x07, 0x4b, 0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x70, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x6c, 0x6c, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2d, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x6c, 0x6c, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x70, 0x0a, 0x0f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x6c, 0x6c, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x6c, 0x6c, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x6c, 0x6c, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x2d, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4d, 0x61,
	0x6c, 0x6c, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x2b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x41, 0x0a,
	0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x6c, 0x6c, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x2e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x70, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6c, 0x6c, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2d, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x70, 0x62, 0x2e, 0x4d, 0x61, 0x6c, 0x6c, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x70, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6c, 0x6c,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x70,
	0x62, 0x2e, 0x4d, 0x61, 0x6c, 0x6c, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6c, 0x6c, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x40, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6c, 0x6c,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x6c, 0x6c, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x6d, 0x0a, 0x0f, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2d, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x6c, 0x6c, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x0c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x2e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xe8, 0x01, 0x0a, 0x10, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x6c, 0x6c,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2b,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x59, 0x0a, 0x0d, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x0a, 0x0f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2d, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x6c, 0x6c, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x0c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x2e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x39, 0x0a, 0x08, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c,
	0x50, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x50, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x6b, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x2f, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2e, 0x0a,
	0x08, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x46, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x22, 0xb5, 0x01,
	0x0a, 0x06, 0x4d, 0x53, 0x46, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x4c, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x74,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x0c, 0x4d, 0x53, 0x46, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x4c, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x50, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x0f, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x63,
	0x6f, 0x64, 0x65, 0x52, 0x44, 0x49, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a,
	0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x2b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x22, 0x0a, 0x0c,
	0x53, 0x68, 0x65, 0x6c, 0x6c, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x44, 0x49, 0x12, 0x12, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xf1, 0x01, 0x0a, 0x0c, 0x4d, 0x73, 0x66, 0x53, 0x74, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x41, 0x72, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x53, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x4f, 0x53, 0x12, 0x34, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x61, 0x64, 0x43, 0x68, 0x61, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x42,
	0x61, 0x64, 0x43, 0x68, 0x61, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x5c, 0x0a, 0x09, 0x4d, 0x73, 0x66, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x48, 0x6f, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7c, 0x0a, 0x0a, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x50, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x08, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x08, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x44, 0x22, 0x5d, 0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x08, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x08, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x5c, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x22, 0xd1, 0x02, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x72, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x45, 0x72, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x4a, 0x6f, 0x62, 0x12,
	0x2b, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x06,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x06,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x36, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x74, 0x0a,
	0x0a, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x11, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a,
	0x08, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x1a, 0x51, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x40, 0x0a, 0x14, 0x57, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x07, 0x57, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x51, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x39, 0x0a, 0x08, 0x57, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x08, 0x57, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x0e, 0x57, 0x47, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x22, 0x54, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x22, 0xa6, 0x02,
	0x0a, 0x04, 0x4c, 0x6f, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e,
	0x4c, 0x6f, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x4c, 0x6f, 0x6f, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x4c, 0x6f, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x2d, 0x0a, 0x07, 0x41, 0x6c, 0x6c, 0x4c, 0x6f, 0x6f,
	0x74, 0x12, 0x22, 0x0a, 0x04, 0x4c, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x6f, 0x74, 0x52,
	0x04, 0x4c, 0x6f, 0x6f, 0x74, 0x22, 0x45, 0x0a, 0x03, 0x49, 0x4f, 0x43, 0x12, 0x12, 0x0a, 0x04,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x27, 0x0a, 0x0d,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xa3, 0x02, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f,
	0x73, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f,
	0x73, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x53, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x04, 0x49, 0x4f, 0x43, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x49, 0x4f,
	0x43, 0x52, 0x04, 0x49, 0x4f, 0x43, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x59, 0x0a, 0x12, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x30, 0x0a, 0x08, 0x41,
	0x6c, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x48, 0x6f, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x05, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x22, 0xf3, 0x01,
	0x0a, 0x0c, 0x44, 0x6c, 0x6c, 0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x2a,
	0x0a, 0x10, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x4c, 0x4c, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x44, 0x4c, 0x4c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44,
	0x4c, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x44, 0x4c, 0x4c, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x44, 0x4c, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x44, 0x4c, 0x4c, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x09, 0x44, 0x6c, 0x6c, 0x48, 0x69, 0x6a, 0x61, 0x63, 0x6b,
	0x12, 0x2e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2a, 0x46, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x6c, 0x69,
	0x76, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x65, 0x61, 0x64, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x04, 0x2a, 0x4a, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x48, 0x41, 0x52,
	0x45, 0x44, 0x5f, 0x4c, 0x49, 0x42, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x48, 0x45, 0x4c,
	0x4c, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x10, 0x03, 0x2a, 0x2e, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x54, 0x54,
	0x50, 0x53, 0x10, 0x02, 0x2a, 0xf2, 0x02, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x55,
	0x73, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x61, 0x6e,
	0x61, 0x72, 0x79, 0x42, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4a,
	0x6f, 0x62, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x4a,
	0x6f, 0x62, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x09, 0x12, 0x0b,
	0x0a, 0x07, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x57,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x0c, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x10, 0x14,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x10, 0x1f, 0x12, 0x11, 0x0a,
	0x0d, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x20,
	0x12, 0x11, 0x0a, 0x0d, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x10, 0x21, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x10, 0x22, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x6f, 0x6f,
	0x74, 0x41, 0x64, 0x64, 0x65, 0x64, 0x10, 0x28, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x6f, 0x6f, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x29, 0x2a, 0x4c, 0x0a, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x05, 0x2a, 0x2e, 0x0a, 0x08, 0x4c, 0x6f, 0x6f, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x4f, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x4f, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x2a, 0x4d, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f,
	0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x50, 0x49, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x49, 0x4c, 0x45, 0x10, 0x03, 0x2a, 0x2d, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54,
	0x45, 0x58, 0x54, 0x10, 0x02, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x69, 0x73, 0x68, 0x6f, 0x70, 0x66, 0x6f, 0x78, 0x2f, 0x73, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_clientpb_client_proto_rawDescOnce sync.Once
	file_clientpb_client_proto_rawDescData = file_clientpb_client_proto_rawDesc
)

func file_clientpb_client_proto_rawDescGZIP() []byte {
	file_clientpb_client_proto_rawDescOnce.Do(func() {
		file_clientpb_client_proto_rawDescData = protoimpl.X.CompressGZIP(file_clientpb_client_proto_rawDescData)
	})
	return file_clientpb_client_proto_rawDescData
}

var file_clientpb_client_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_clientpb_client_proto_msgTypes = make([]protoimpl.MessageInfo, 86)
var file_clientpb_client_proto_goTypes = []interface{}{
	(State)(0),                    // 0: clientpb.State
	(OutputFormat)(0),             // 1: clientpb.OutputFormat
	(StagerProtocol)(0),           // 2: clientpb.StagerProtocol
	(EventType)(0),                // 3: clientpb.EventType
	(Level)(0),                    // 4: clientpb.Level
	(LootType)(0),                 // 5: clientpb.LootType
	(CredentialType)(0),           // 6: clientpb.CredentialType
	(FileType)(0),                 // 7: clientpb.FileType
	(*Version)(nil),               // 8: clientpb.Version
	(*AddCmdHistoryRequest)(nil),  // 9: clientpb.AddCmdHistoryRequest
	(*AddCmdHistory)(nil),         // 10: clientpb.AddCmdHistory
	(*HistoryRequest)(nil),        // 11: clientpb.HistoryRequest
	(*History)(nil),               // 12: clientpb.History
	(*GetConsoleConfigReq)(nil),   // 13: clientpb.GetConsoleConfigReq
	(*GetConsoleConfig)(nil),      // 14: clientpb.GetConsoleConfig
	(*SaveConsoleConfigReq)(nil),  // 15: clientpb.SaveConsoleConfigReq
	(*SaveConsoleConfig)(nil),     // 16: clientpb.SaveConsoleConfig
	(*GetSliverSettingsReq)(nil),  // 17: clientpb.GetSliverSettingsReq
	(*GetSliverSettings)(nil),     // 18: clientpb.GetSliverSettings
	(*SaveSliverSettingsReq)(nil), // 19: clientpb.SaveSliverSettingsReq
	(*SaveSliverSettings)(nil),    // 20: clientpb.SaveSliverSettings
	(*Session)(nil),               // 21: clientpb.Session
	(*Beacon)(nil),                // 22: clientpb.Beacon
	(*Beacons)(nil),               // 23: clientpb.Beacons
	(*BeaconTask)(nil),            // 24: clientpb.BeaconTask
	(*BeaconTasks)(nil),           // 25: clientpb.BeaconTasks
	(*ImplantConfig)(nil),         // 26: clientpb.ImplantConfig
	(*ImplantBuilds)(nil),         // 27: clientpb.ImplantBuilds
	(*CompilerTarget)(nil),        // 28: clientpb.CompilerTarget
	(*CrossCompiler)(nil),         // 29: clientpb.CrossCompiler
	(*Compiler)(nil),              // 30: clientpb.Compiler
	(*DeleteReq)(nil),             // 31: clientpb.DeleteReq
	(*DNSCanary)(nil),             // 32: clientpb.DNSCanary
	(*Canaries)(nil),              // 33: clientpb.Canaries
	(*UniqueWGIP)(nil),            // 34: clientpb.UniqueWGIP
	(*ImplantProfile)(nil),        // 35: clientpb.ImplantProfile
	(*ImplantProfiles)(nil),       // 36: clientpb.ImplantProfiles
	(*RegenerateReq)(nil),         // 37: clientpb.RegenerateReq
	(*Job)(nil),                   // 38: clientpb.Job
	(*Jobs)(nil),                  // 39: clientpb.Jobs
	(*KillJobReq)(nil),            // 40: clientpb.KillJobReq
	(*KillJob)(nil),               // 41: clientpb.KillJob
	(*CreateMalleableReq)(nil),    // 42: clientpb.CreateMalleableReq
	(*CreateMalleable)(nil),       // 43: clientpb.CreateMalleable
	(*DeleteMalleableReq)(nil),    // 44: clientpb.DeleteMalleableReq
	(*DeleteMalleable)(nil),       // 45: clientpb.DeleteMalleable
	(*UpdateMalleableReq)(nil),    // 46: clientpb.UpdateMalleableReq
	(*UpdateMalleable)(nil),       // 47: clientpb.UpdateMalleable
	(*GetMalleablesReq)(nil),      // 48: clientpb.GetMalleablesReq
	(*GetMalleables)(nil),         // 49: clientpb.GetMalleables
	(*HandlerStageReq)(nil),       // 50: clientpb.HandlerStageReq
	(*HandlerStage)(nil),          // 51: clientpb.HandlerStage
	(*HandlerStagerReq)(nil),      // 52: clientpb.HandlerStagerReq
	(*HandlerStager)(nil),         // 53: clientpb.HandlerStager
	(*HandlerCloseReq)(nil),       // 54: clientpb.HandlerCloseReq
	(*HandlerClose)(nil),          // 55: clientpb.HandlerClose
	(*Sessions)(nil),              // 56: clientpb.Sessions
	(*UpdateSession)(nil),         // 57: clientpb.UpdateSession
	(*GenerateReq)(nil),           // 58: clientpb.GenerateReq
	(*Generate)(nil),              // 59: clientpb.Generate
	(*MSFReq)(nil),                // 60: clientpb.MSFReq
	(*MSFRemoteReq)(nil),          // 61: clientpb.MSFRemoteReq
	(*ShellcodeRDIReq)(nil),       // 62: clientpb.ShellcodeRDIReq
	(*ShellcodeRDI)(nil),          // 63: clientpb.ShellcodeRDI
	(*MsfStagerReq)(nil),          // 64: clientpb.MsfStagerReq
	(*MsfStager)(nil),             // 65: clientpb.MsfStager
	(*GetSystemReq)(nil),          // 66: clientpb.GetSystemReq
	(*MigrateReq)(nil),            // 67: clientpb.MigrateReq
	(*CreateTunnelReq)(nil),       // 68: clientpb.CreateTunnelReq
	(*CreateTunnel)(nil),          // 69: clientpb.CreateTunnel
	(*CloseTunnelReq)(nil),        // 70: clientpb.CloseTunnelReq
	(*Client)(nil),                // 71: clientpb.Client
	(*Event)(nil),                 // 72: clientpb.Event
	(*Operators)(nil),             // 73: clientpb.Operators
	(*Operator)(nil),              // 74: clientpb.Operator
	(*WebContent)(nil),            // 75: clientpb.WebContent
	(*WebsiteAddContent)(nil),     // 76: clientpb.WebsiteAddContent
	(*WebsiteRemoveContent)(nil),  // 77: clientpb.WebsiteRemoveContent
	(*Website)(nil),               // 78: clientpb.Website
	(*Websites)(nil),              // 79: clientpb.Websites
	(*WGClientConfig)(nil),        // 80: clientpb.WGClientConfig
	(*Credential)(nil),            // 81: clientpb.Credential
	(*Loot)(nil),                  // 82: clientpb.Loot
	(*AllLoot)(nil),               // 83: clientpb.AllLoot
	(*IOC)(nil),                   // 84: clientpb.IOC
	(*ExtensionData)(nil),         // 85: clientpb.ExtensionData
	(*Host)(nil),                  // 86: clientpb.Host
	(*AllHosts)(nil),              // 87: clientpb.AllHosts
	(*DllHijackReq)(nil),          // 88: clientpb.DllHijackReq
	(*DllHijack)(nil),             // 89: clientpb.DllHijack
	nil,                           // 90: clientpb.ImplantBuilds.ConfigsEntry
	nil,                           // 91: clientpb.WebsiteAddContent.ContentsEntry
	nil,                           // 92: clientpb.Website.ContentsEntry
	nil,                           // 93: clientpb.Host.ExtensionDataEntry
	(*commonpb.Request)(nil),      // 94: commonpb.Request
	(*commonpb.Response)(nil),     // 95: commonpb.Response
	(*sliverpb.Malleable)(nil),    // 96: sliverpb.Malleable
	(*commonpb.File)(nil),         // 97: commonpb.File
}
var file_clientpb_client_proto_depIdxs = []int32{
	21, // 0: clientpb.AddCmdHistoryRequest.Session:type_name -> clientpb.Session
	22, // 1: clientpb.AddCmdHistoryRequest.Beacon:type_name -> clientpb.Beacon
	94, // 2: clientpb.AddCmdHistoryRequest.Request:type_name -> commonpb.Request
	95, // 3: clientpb.AddCmdHistory.Response:type_name -> commonpb.Response
	21, // 4: clientpb.HistoryRequest.Session:type_name -> clientpb.Session
	22, // 5: clientpb.HistoryRequest.Beacon:type_name -> clientpb.Beacon
	94, // 6: clientpb.HistoryRequest.Request:type_name -> commonpb.Request
	95, // 7: clientpb.History.Response:type_name -> commonpb.Response
	94, // 8: clientpb.GetConsoleConfigReq.Request:type_name -> commonpb.Request
	95, // 9: clientpb.GetConsoleConfig.Response:type_name -> commonpb.Response
	94, // 10: clientpb.SaveConsoleConfigReq.Request:type_name -> commonpb.Request
	95, // 11: clientpb.SaveConsoleConfig.Response:type_name -> commonpb.Response
	94, // 12: clientpb.GetSliverSettingsReq.Request:type_name -> commonpb.Request
	95, // 13: clientpb.GetSliverSettings.Response:type_name -> commonpb.Response
	94, // 14: clientpb.SaveSliverSettingsReq.Request:type_name -> commonpb.Request
	95, // 15: clientpb.SaveSliverSettings.Response:type_name -> commonpb.Response
	0,  // 16: clientpb.Session.State:type_name -> clientpb.State
	0,  // 17: clientpb.Beacon.State:type_name -> clientpb.State
	22, // 18: clientpb.Beacons.Beacons:type_name -> clientpb.Beacon
	24, // 19: clientpb.BeaconTasks.Tasks:type_name -> clientpb.BeaconTask
	1,  // 20: clientpb.ImplantConfig.Format:type_name -> clientpb.OutputFormat
	96, // 21: clientpb.ImplantConfig.C2s:type_name -> sliverpb.Malleable
	90, // 22: clientpb.ImplantBuilds.Configs:type_name -> clientpb.ImplantBuilds.ConfigsEntry
	1,  // 23: clientpb.CompilerTarget.Format:type_name -> clientpb.OutputFormat
	28, // 24: clientpb.Compiler.Targets:type_name -> clientpb.CompilerTarget
	29, // 25: clientpb.Compiler.CrossCompilers:type_name -> clientpb.CrossCompiler
	28, // 26: clientpb.Compiler.UnsupportedTargets:type_name -> clientpb.CompilerTarget
	32, // 27: clientpb.Canaries.Canaries:type_name -> clientpb.DNSCanary
	26, // 28: clientpb.ImplantProfile.Config:type_name -> clientpb.ImplantConfig
	35, // 29: clientpb.ImplantProfiles.Profiles:type_name -> clientpb.ImplantProfile
	96, // 30: clientpb.Job.Profile:type_name -> sliverpb.Malleable
	38, // 31: clientpb.Jobs.Active:type_name -> clientpb.Job
	96, // 32: clientpb.CreateMalleableReq.Profile:type_name -> sliverpb.Malleable
	94, // 33: clientpb.CreateMalleableReq.Request:type_name -> commonpb.Request
	96, // 34: clientpb.CreateMalleable.Profile:type_name -> sliverpb.Malleable
	95, // 35: clientpb.CreateMalleable.Response:type_name -> commonpb.Response
	96, // 36: clientpb.DeleteMalleableReq.Profile:type_name -> sliverpb.Malleable
	94, // 37: clientpb.DeleteMalleableReq.Request:type_name -> commonpb.Request
	95, // 38: clientpb.DeleteMalleable.Response:type_name -> commonpb.Response
	96, // 39: clientpb.UpdateMalleableReq.Profile:type_name -> sliverpb.Malleable
	94, // 40: clientpb.UpdateMalleableReq.Request:type_name -> commonpb.Request
	96, // 41: clientpb.UpdateMalleable.Updated:type_name -> sliverpb.Malleable
	95, // 42: clientpb.UpdateMalleable.Response:type_name -> commonpb.Response
	94, // 43: clientpb.GetMalleablesReq.Request:type_name -> commonpb.Request
	96, // 44: clientpb.GetMalleables.Profiles:type_name -> sliverpb.Malleable
	96, // 45: clientpb.HandlerStageReq.Profile:type_name -> sliverpb.Malleable
	94, // 46: clientpb.HandlerStageReq.Request:type_name -> commonpb.Request
	95, // 47: clientpb.HandlerStage.Response:type_name -> commonpb.Response
	2,  // 48: clientpb.HandlerStagerReq.Protocol:type_name -> clientpb.StagerProtocol
	96, // 49: clientpb.HandlerStagerReq.Profile:type_name -> sliverpb.Malleable
	94, // 50: clientpb.HandlerStagerReq.Request:type_name -> commonpb.Request
	95, // 51: clientpb.HandlerStager.Response:type_name -> commonpb.Response
	96, // 52: clientpb.HandlerCloseReq.Profile:type_name -> sliverpb.Malleable
	94, // 53: clientpb.HandlerCloseReq.Request:type_name -> commonpb.Request
	95, // 54: clientpb.HandlerClose.Response:type_name -> commonpb.Response
	21, // 55: clientpb.Sessions.Sessions:type_name -> clientpb.Session
	26, // 56: clientpb.GenerateReq.Config:type_name -> clientpb.ImplantConfig
	94, // 57: clientpb.GenerateReq.Request:type_name -> commonpb.Request
	97, // 58: clientpb.Generate.File:type_name -> commonpb.File
	94, // 59: clientpb.MSFReq.Request:type_name -> commonpb.Request
	94, // 60: clientpb.MSFRemoteReq.Request:type_name -> commonpb.Request
	94, // 61: clientpb.ShellcodeRDIReq.Request:type_name -> commonpb.Request
	2,  // 62: clientpb.MsfStagerReq.Protocol:type_name -> clientpb.StagerProtocol
	94, // 63: clientpb.MsfStagerReq.Request:type_name -> commonpb.Request
	97, // 64: clientpb.MsfStager.File:type_name -> commonpb.File
	94, // 65: clientpb.MsfStager.Request:type_name -> commonpb.Request
	26, // 66: clientpb.GetSystemReq.Config:type_name -> clientpb.ImplantConfig
	94, // 67: clientpb.GetSystemReq.Request:type_name -> commonpb.Request
	26, // 68: clientpb.MigrateReq.Config:type_name -> clientpb.ImplantConfig
	94, // 69: clientpb.MigrateReq.Request:type_name -> commonpb.Request
	94, // 70: clientpb.CreateTunnelReq.Request:type_name -> commonpb.Request
	94, // 71: clientpb.CloseTunnelReq.Request:type_name -> commonpb.Request
	74, // 72: clientpb.Client.Operator:type_name -> clientpb.Operator
	3,  // 73: clientpb.Event.Type:type_name -> clientpb.EventType
	4,  // 74: clientpb.Event.Level:type_name -> clientpb.Level
	71, // 75: clientpb.Event.Client:type_name -> clientpb.Client
	38, // 76: clientpb.Event.Job:type_name -> clientpb.Job
	21, // 77: clientpb.Event.Session:type_name -> clientpb.Session
	22, // 78: clientpb.Event.Beacon:type_name -> clientpb.Beacon
	74, // 79: clientpb.Operators.Operators:type_name -> clientpb.Operator
	91, // 80: clientpb.WebsiteAddContent.Contents:type_name -> clientpb.WebsiteAddContent.ContentsEntry
	92, // 81: clientpb.Website.Contents:type_name -> clientpb.Website.ContentsEntry
	78, // 82: clientpb.Websites.Websites:type_name -> clientpb.Website
	5,  // 83: clientpb.Loot.Type:type_name -> clientpb.LootType
	6,  // 84: clientpb.Loot.CredentialType:type_name -> clientpb.CredentialType
	81, // 85: clientpb.Loot.Credential:type_name -> clientpb.Credential
	7,  // 86: clientpb.Loot.FileType:type_name -> clientpb.FileType
	97, // 87: clientpb.Loot.File:type_name -> commonpb.File
	82, // 88: clientpb.AllLoot.Loot:type_name -> clientpb.Loot
	84, // 89: clientpb.Host.IOCs:type_name -> clientpb.IOC
	93, // 90: clientpb.Host.ExtensionData:type_name -> clientpb.Host.ExtensionDataEntry
	86, // 91: clientpb.AllHosts.Hosts:type_name -> clientpb.Host
	94, // 92: clientpb.DllHijackReq.Request:type_name -> commonpb.Request
	95, // 93: clientpb.DllHijack.Response:type_name -> commonpb.Response
	26, // 94: clientpb.ImplantBuilds.ConfigsEntry.value:type_name -> clientpb.ImplantConfig
	75, // 95: clientpb.WebsiteAddContent.ContentsEntry.value:type_name -> clientpb.WebContent
	75, // 96: clientpb.Website.ContentsEntry.value:type_name -> clientpb.WebContent
	85, // 97: clientpb.Host.ExtensionDataEntry.value:type_name -> clientpb.ExtensionData
	98, // [98:98] is the sub-list for method output_type
	98, // [98:98] is the sub-list for method input_type
	98, // [98:98] is the sub-list for extension type_name
	98, // [98:98] is the sub-list for extension extendee
	0,  // [0:98] is the sub-list for field type_name
}

func init() { file_clientpb_client_proto_init() }
func file_clientpb_client_proto_init() {
	if File_clientpb_client_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_clientpb_client_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCmdHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCmdHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*History); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsoleConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsoleConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveConsoleConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveConsoleConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSliverSettingsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSliverSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveSliverSettingsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveSliverSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Beacon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Beacons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeaconTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeaconTasks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplantConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplantBuilds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompilerTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossCompiler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Compiler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSCanary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Canaries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniqueWGIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplantProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplantProfiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegenerateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KillJobReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KillJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMalleableReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMalleable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMalleableReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMalleable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMalleableReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMalleable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMalleablesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMalleables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandlerStageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandlerStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandlerStagerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandlerStager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandlerCloseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandlerClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sessions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Generate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSFReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSFRemoteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShellcodeRDIReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShellcodeRDI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsfStagerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsfStager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSystemReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTunnelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTunnel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseTunnelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operators); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsiteAddContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsiteRemoveContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Website); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Websites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WGClientConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Loot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllLoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IOC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllHosts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DllHijackReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientpb_client_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DllHijack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_clientpb_client_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   86,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_clientpb_client_proto_goTypes,
		DependencyIndexes: file_clientpb_client_proto_depIdxs,
		EnumInfos:         file_clientpb_client_proto_enumTypes,
		MessageInfos:      file_clientpb_client_proto_msgTypes,
	}.Build()
	File_clientpb_client_proto = out.File
	file_clientpb_client_proto_rawDesc = nil
	file_clientpb_client_proto_goTypes = nil
	file_clientpb_client_proto_depIdxs = nil
}
