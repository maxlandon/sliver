{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$ref": "#/definitions/MalleableHTTP",
    "definitions": {
        "MalleableHTTP": {
            "properties": {
                "ID": {
                    "type": "string",
                    "description": "ID - You should NOT EVER modify the ID of a Malleable profile: even when \n forking an existing one, copying it, updating it, writing it from scratch: \n the Sliver server will ALWAYS take care of an ID."
                },
                "UserAgent": {
                    "type": "string",
                    "description": "UserAgent - The User Agent value is only used when this Profile is consumed\n by an implant Transport, because the implant is (always) acting as the client.\n If this string is empty, the Server will ALWAYS take care of generating a new\n random one. If this field is already populated, that likely means the server\n already generated one for the profile you are currently editing.\n You can change it however you like: it will override the previous value.\n Important: Implant-side field only"
                },
                "URLParameters": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "URLParameters - The URL parameters are some of those fields that will stay \n the same across all HTTP requests: thus, they are not randomized on a \n per-request basis. Currently the HTTP Channel implementation doesn't make \n use of this field."
                },
                "Headers": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Headers - The headers of every HTTP request. If this array is empty, the \n Server will automatically use the following headers (there are risks that \n this list is not up-to-date though):\n \n [\"Cache-Control\", \"no-store, no-cache, must-revalidate\"]\n\n Important: Server-side field only"
                },
                "MaxFiles": {
                    "type": "integer",
                    "description": "MaxFiles - The maximum number of complete file names (ex: mysessionfile.txt),\n that are generated for each SAMPLE, sample being passed to the HTTP C2 \n internals for generating a random request URL. Defaults to 8.\n\n Important: Implant-side field only"
                },
                "MinFiles": {
                    "type": "integer",
                    "description": "MinFiles - The minimum number of complete file names (ex: mysessionfile.txt),\n that are generated for each SAMPLE, sample being passed to the HTTP C2 \n internals for generating a random request URL. Defaults to 2.\n\n Important: Implant-side field only"
                },
                "MaxPaths": {
                    "type": "integer",
                    "description": "MaxPaths - The maximum number of paths (eg: \"my/path/to\" in the following URL:\n \"https://example.domain.com/my/path/to/mysessionfile.txt\") that are generated\n for each SAMPLE, sample being passed to the HTTP C2 internals for generating \n a random request URL. Defaults to 8.\n\n Important: Implant-side field only"
                },
                "MinPaths": {
                    "type": "integer",
                    "description": "MinPaths - The minimum number of paths (eg: \"my/path/to\" in the following URL:\n \"https://example.domain.com/my/path/to/mysessionfile.txt\") that are generated\n for each SAMPLE, sample being passed to the HTTP C2 internals for generating \n a random request URL. Defaults to 2.\n\n Important: Implant-side field only"
                },
                "StagerFileExt": {
                    "type": "string",
                    "description": "StagerFileExt - The Stager file extension is consumed by an HTTP server \n consuming this Profile. All incoming connections requesting a URL ending \n with this extension will be served an implant stage.\n\n Default: \".woff\"\n\n Important: Server-side field only"
                },
                "KeyExchangeFileExt": {
                    "type": "string",
                    "description": "KeyExchangeFileExt - Key Exchange file extension. (default .txt) \n Important: Server/Implant field"
                },
                "KeyExchangeFiles": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "KeyExchangeFiles - Filenames for key exchange requests.\n\n Default list: \n \"robots\", \"sample\", \"readme\", \"example\"\n\n Important: Server/Implant field"
                },
                "KeyExchangePaths": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "KeyExchangePaths - URL paths for key exchange requests.\n \n Default list: \n \"static\", \"www\", \"assets\", \"text\", \"docs\", \n \"sample\", \"data\", \"readme\", \"examples\"\n\n Important: Server/Implant field"
                },
                "PollFileExt": {
                    "type": "string",
                    "description": "PollFileExt - Session Polling file extension. For a normal Session/Beacon \n Channel, polling files are the most used ones, because most of the \n underlying stream content passes through them (default: .js)\n\n Important: Server/Implant field"
                },
                "PollFiles": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "PollFiles - Filenames for session polling requests.\n \n Default list: \n \"bootstrap\", \"bootstrap.min\", \"jquery.min\", \"jquery\", \"route\",\n \"app\", \"app.min\", \"array\", \"backbone\", \"script\", \"email\",\n\n Important: Server/Implant field"
                },
                "PollPaths": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "PollPaths - URL paths for session polling requests.\n \n Default list: \n \"js\", \"umd\", \"assets\", \"bundle\", \"bundles\", \"scripts\", \"script\", \n \"javascripts\", \"javascript\", \"jscript\",\n\n Important: Server/Implant field"
                },
                "StartSessionFileExt": {
                    "type": "string",
                    "description": "StartSessionFileExt - File extension for requests to start a new Session.\n This is also used by Beacon channels because as the Malleable.Type \n documentation above explains, the Session type is used by Beacon channels.\n (default .phtml)\n\n Important: Server/Implant field"
                },
                "SessionFileExt": {
                    "type": "string",
                    "description": "SessionFileExt - Session files requests are used when the implant side \n of the channel (the client) wants to write data back to the server. Thus, \n session files are also used a lot, like Poll requests. (default: .php)"
                },
                "SessionFiles": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "SessionFiles - Filenames for session (write data to server) requests.\n\n Default list:\n \"login\", \"signin\", \"api\", \"samples\", \"rpc\", \"index\",\n \"admin\", \"register\", \"sign-up\",\n\n Important: Server/Implant field"
                },
                "SessionPaths": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "SessionPaths - URL paths for session (write data to server) requests.\n\n Default list:\n \"php\", \"api\", \"upload\", \"actions\", \"rest\", \"v1\", \"auth\", \"authenticate\",\n \"oauth\", \"oauth2\", \"oauth2callback\", \"database\", \"db\", \"namespaces\",\n\n Important: Server/Implant field"
                },
                "CloseFileExt": {
                    "type": "string",
                    "description": "CloseFileExt - The file extension used for requests to close the HTTP Channel.\n (default: .png)\n \n Important: Server/Implant field"
                },
                "CloseFiles": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "CloseFiles - Filenames for Session close requests.\n\n Default list: \"favicon\", \"sample\", \"example\",\n\n Important: Server/Implant field"
                },
                "ClosePaths": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "ClosePaths - URL paths for Session close requests.\n\n Default list:\n \"static\", \"www\", \"assets\", \"images\", \"icons\", \"image\", \"icon\", \"png\",\n\n Important: Server/Implant field"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "MalleableHTTP - An HTTP-specific Channel profile. Important notes:\n - There is a SINGLE HTTP profile type for both server and implant sides \n of the channel. Thus, some fields might be used by both ends, while other\n fields will only be used by one of them. All fields in the HTTP section\n have a documentation specifiying which channel side uses them.\n - Because different implants might make use of different but overlaping HTTP\n profiles, the server side of the channel is able to \"merge\" several HTTP\n profiles into one at runtime, so as to be able to serve all implants.\n - If some fields are populated by yourself, and that other required fields \n remain empty, they will be automatically populated with random samples out \n of their default lists/values when the Profile is consumed (compiled or used \n with a handler)"
        }
    }
}